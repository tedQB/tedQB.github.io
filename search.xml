<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs中间件笔记</title>
      <link href="/2019/02/20/nodejs/"/>
      <url>/2019/02/20/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="connect-history-api-fallback"><a href="#connect-history-api-fallback" class="headerlink" title="connect-history-api-fallback"></a>connect-history-api-fallback</h2><p>单页面应用程序(SPA)通常使用一个web浏览器可以访问的索引文件，比如index.html，然后，在HTML5 History API的帮助下（react-router就是基于History API实现的），借助JavaScript处理应用程序中的导航。当用户单击刷新按钮或直接通过输入地址的方式访问页面时，会出现找不到页面的问题，因为这两种方式都绕开了History API，而我们的请求又找不到后端对应的路由，页面返回404错误。</p><p>connect-history-api-fallback中间件很好的解决了这个问题。具体来说，每当出现符合以下条件的请求时，它将把请求定位到你指定的索引文件(默认为/index.html)。<br><a href="https://www.jianshu.com/p/6f564064004e" target="_blank" rel="noopener">link</a></p><h2 id="express-session-connect-mongo"><a href="#express-session-connect-mongo" class="headerlink" title="express-session connect-mongo"></a>express-session connect-mongo</h2><p><a href="https://blog.csdn.net/cckevincyh/article/details/79816491" target="_blank" rel="noopener">Express Session的使用</a><br><a href="https://www.cnblogs.com/l8l8/p/9317069.html" target="_blank" rel="noopener">node exprss-session 和connect-mongo</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> express();</span><br><span class="line"><span class="keyword">let</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(session);</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    secret:<span class="string">'keyboard cat'</span>, <span class="comment">//加密字符串也可以写数组</span></span><br><span class="line">    resave:<span class="literal">true</span>,     <span class="comment">//强制保存session 建议设置成false</span></span><br><span class="line">    saveUninitialized:<span class="literal">true</span>,  <span class="comment">//强制保存未初始化的内容</span></span><br><span class="line">    rolling:<span class="literal">true</span>, <span class="comment">//动态刷新页面cookie存放时间</span></span><br><span class="line">    cookie:&#123;<span class="attr">maxAge</span>:<span class="number">10000</span>&#125;, <span class="comment">//保存时效</span></span><br><span class="line">    store:<span class="keyword">new</span> MongoStore(&#123;   <span class="comment">//将session存进数据库  用来解决负载均衡的问题</span></span><br><span class="line">        url:<span class="string">'mongodb://127.0.0.1:27017/db06'</span>,</span><br><span class="line">        touchAfter:<span class="number">24</span>*<span class="number">3600</span> <span class="comment">//通过这样做，设置touchAfter:24 * 3600，您在24小时内</span></span><br><span class="line">       <span class="comment">//只更新一次会话，不管有多少请求(除了在会话数据上更改某些内容的除外)</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br><span class="line">app.get(<span class="string">'/login'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    req.session.userinfo = <span class="string">'admin'</span>;</span><br><span class="line">    res.send(<span class="string">'存储成功'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="cookie-parser"><a href="#cookie-parser" class="headerlink" title="cookie-parser"></a>cookie-parser</h2><p><a href="https://www.cnblogs.com/chyingp/p/express-cookie-parser-deep-in.html" target="_blank" rel="noopener">Express使用进阶：cookie-parser中间件实现深入剖析</a><br><a href="https://www.jianshu.com/p/aa6cc22c8d23" target="_blank" rel="noopener">express中cookie的使用和cookie-parser的解读</a></p><h2 id="Express-function-req-res-next"><a href="#Express-function-req-res-next" class="headerlink" title="Express function(req,res,next)"></a>Express function(req,res,next)</h2><p>Node.js Express 里常常见到function(req, res, next)</p><p><strong>req :  request的缩写， 请求的数据Request</strong><br>对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。<br>常用req.body.xx来表示POST的xx属性</p><p><strong>res:   response的缩写， 响应的数据</strong><br>Response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。<br>我们常常用res.send() 传送HTTP响应 , res.render()渲染结果页面</p><p><strong>next 前往下一个中间件</strong><br>执行相同路径的下一个方法;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">route.get(&quot;/a&quot;,function(req,res,next)&#123;</span><br><span class="line">    console.log(&quot;a&quot;);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line">route.get(&quot;/a&quot;,function(req,res)&#123;</span><br><span class="line">    console.log(&quot;b&quot;);</span><br><span class="line">    res.send(&quot;a&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">//a,b</span><br></pre></td></tr></table></figure></p><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><p><a href="https://segmentfault.com/a/1190000012095054" target="_blank" rel="noopener">link</a></p><h2 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h2><p>日志中间件</p><h2 id="config-lite"><a href="#config-lite" class="headerlink" title="config-lite"></a>config-lite</h2><p>config-lite 是一个轻量的读取配置文件的模块。<br>config-lite 会根据环境变量（NODE_ENV）的不同从当前执行进程目录下的 config 目录加载不同的配置文件。<br>config-lite 支持 .js、.json、.node、.yml、.yaml 后缀的文件。</p><p><strong>Example</strong></p><p><strong>config/default.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &apos;default&apos;;</span><br></pre></td></tr></table></figure><p><strong>config/test.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &apos;test&apos;;</span><br></pre></td></tr></table></figure><p><strong>config/production.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &apos;production&apos;;</span><br></pre></td></tr></table></figure><p>\====================================</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node app</span><br><span class="line"></span><br><span class="line">require(&apos;config-lite&apos;); //=&gt; &apos;default&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=test node app</span><br><span class="line"></span><br><span class="line">require(&apos;config-lite&apos;); //=&gt; &apos;test&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production node app</span><br><span class="line"></span><br><span class="line">require(&apos;config-lite&apos;); //=&gt; &apos;production&apos;</span><br></pre></td></tr></table></figure><p>or:</p><p><code>`</code><br>NODE_ENV=production node app –host=localhost –port=3000</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react笔记</title>
      <link href="/2018/10/14/reactnote/"/>
      <url>/2018/10/14/reactnote/</url>
      
        <content type="html"><![CDATA[<h2 id="如何在react框架下实现一个hashrouter"><a href="#如何在react框架下实现一个hashrouter" class="headerlink" title="如何在react框架下实现一个hashrouter"></a>如何在react框架下实现一个hashrouter</h2><p><a href="https://segmentfault.com/a/1190000014313428" target="_blank" rel="noopener">link</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span>  //错误 HashRouter不能包含多个Route子节点</span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/topic"</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br><span class="line">function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;...&#125;</span>&gt;</span>&#123;l&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="react-router4-0-简单介绍"><a href="#react-router4-0-简单介绍" class="headerlink" title="react-router4.0 简单介绍"></a>react-router4.0 简单介绍</h2><p>已经不需要配置路由，一切皆组件。</p><ul><li>react-router:提供了一些router的核心api,包括Router,Route,Switch等</li><li>react-router-dom:提供了BrowserRouter, HashRouter,Route,Link,NavLink</li></ul><p>react-router-dom核心用法</p><ul><li>HashRouter 和BrowserRouter</li><li>Route: path   exact    component  render</li><li>NavLink    Link</li><li>Switch</li><li>Redirect </li></ul><hr><h2 id="jsx如何注释？"><a href="#jsx如何注释？" class="headerlink" title="jsx如何注释？"></a>jsx如何注释？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123; /*</span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu</span> <span class="attr">theme</span>=<span class="string">"dark"</span>&gt;</span></span><br><span class="line">    &lt;SubMenu key="sub4" title=&#123;&lt;span&gt;&lt;Icon type="setting" /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Navigation Three<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu.Item</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>Option 9<span class="tag">&lt;/<span class="name">Menu.Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu.Item</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>Option 10<span class="tag">&lt;/<span class="name">Menu.Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu.Item</span> <span class="attr">key</span>=<span class="string">"3"</span>&gt;</span>Option 11<span class="tag">&lt;/<span class="name">Menu.Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Menu.Item</span> <span class="attr">key</span>=<span class="string">"4"</span>&gt;</span>Option 12<span class="tag">&lt;/<span class="name">Menu.Item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SubMenu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span><br><span class="line">*/ &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ant-Desigin的-一些优化方案-link"><a href="#ant-Desigin的-一些优化方案-link" class="headerlink" title="ant Desigin的 一些优化方案 link"></a>ant Desigin的 一些优化方案 <a href="https://ant.design/docs/react/use-with-create-react-app-cn" target="_blank" rel="noopener">link</a></h2><p>yarn add  –save-dev less less-loadr<br>yarn add  –save-dev axios react-router</p><hr><h2 id="初识React"><a href="#初识React" class="headerlink" title="初识React"></a>初识React</h2><p><strong>如何在React项目中使用less?</strong><br><a href="https://www.jianshu.com/p/51ff1c8be301" target="_blank" rel="noopener">link</a><br><strong>npm run eject报错。如何解决?</strong><br>git add .然后git commit -m “init”  然后再npm run eject<br>React里，jsx所有的变量，表达式都在一个大括号{    }里做的。<br>相比之下，Vue比较混乱。 </p><hr><p><strong>创建react项目</strong></p><ol><li>VSCode编辑器中使用快捷键ctrl+`打开终端 </li><li>在终端输入create-react-app demo，自动创建名称为demo的项目 </li><li>cd demo进入demo项目中 </li><li>yarn start或yarn build运行项目</li><li>此时，一个React项目就搭建成功。使用VScode搭建React要简单很多，配置信息都可以省去。直接开始编写组件就可以</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueRouter原理</title>
      <link href="/2018/03/17/vuerouter/"/>
      <url>/2018/03/17/vuerouter/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-router源码图"><a href="#Vue-router源码图" class="headerlink" title="Vue-router源码图"></a>Vue-router源码图</h2><p><img src="/images/vue-router.jpg" width="900"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络</title>
      <link href="/2018/03/09/netcontent/"/>
      <url>/2018/03/09/netcontent/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h2><p><img src="/images/tcp.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP头部重要字段</span><br></pre></td></tr></table></figure><ul><li><code>Sequence number</code> 此序号保证了TCP传输的报文都是有序的，对端可以通过序号顺序拼接报文</li><li><code>Acknowledgement Number</code> 此序号标识数据接收期望接收的下一个字节的编号是多少，同时也标识上一个序号的数据已经收到</li><li><code>Window Size</code> 窗口大小，标识还能接收多少字节的数据，用于流量控制</li><li>标识符<ul><li>RUG=1 该字段表示 数据部分包含紧急信息，是一个高优先级数据报文</li><li>ACK=1 该字段 在TCP建立后传送的所有报文必须把<code>ACK</code>设置为1</li><li>PSH=1 表示接收端应该理解将数据push给应用层</li><li>RST=1 表示TCP连接出现严重的问题，可能需要重新建立TCP连接 </li><li>SYN=1 SYN=1andACK=0表示当前报文段是一个连接的请求报文，SYN=1andACK=1表示当前报文是一个统一建立连接的应答报文</li><li>FIN=1 表示此此表文是一个释放连接的请求报文</li></ul></li></ul><h2 id="TCP建立连接三次握手"><a href="#TCP建立连接三次握手" class="headerlink" title="TCP建立连接三次握手"></a>TCP建立连接三次握手</h2><p><img src="/images/tcpthreehandshake.png"></p><ul><li>不管是客户端还是服务端，TCP连接建立后都能发送数据和接收数据，所以TCP是一个全双工协议</li><li>期初两端都是<code>closed</code>状态，通信开始，双方都会创建<code>TCB</code>。服务器创建完<code>TCB</code>都进入LISTEN状态，等待客户端发送数据</li></ul><p><strong>第一次握手</strong><br>客户端向服务端发送连接请求 <code>SYN=1</code> 报文段，该报文中包含自身的数据通讯初始序号，请求发送后，客户端进入 <code>SYN-SENT</code> 状态</p><p><strong>第二次次握手</strong><br>服务端接受到 <code>SYN=1</code> 报文段，如果同意连接，则会发送一个 <code>SYN=1 and ACK=1</code> 的应答，包含自身的数据通信初始序号，发送完进入 <code>SYN-RECEIVED</code> 状态</p><p><strong>第三次次握手</strong></p><ul><li>当客户端收到<code>SYN=1 and ACK=1</code>的同意连接的应答后，还要向服务端发送一个确认<code>ACK=1</code> 的确认报文，客户端发问后进入<code>ESTABLISHED</code> 状态。服务端接受这个应答后也进入 <code>ESTABLISHED</code> 状态，此时连接成功。</li></ul><h2 id="TCP为何建立连接需要三次握手，明明两次就可以"><a href="#TCP为何建立连接需要三次握手，明明两次就可以" class="headerlink" title="TCP为何建立连接需要三次握手，明明两次就可以"></a>TCP为何建立连接需要三次握手，明明两次就可以</h2><ul><li>背景，在建立连接中，任意一段掉线，TCP都会重复SYN包，一般会重试5次。TCP有超时重传机制</li><li>主要为了防止出现失效的连接请求报文文段被服务端接受的情况，从而产生错误</li><li>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。</li><li>假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，二次握手的情况下，服务端应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。</li></ul><h2 id="TCP断开四次握手"><a href="#TCP断开四次握手" class="headerlink" title="TCP断开四次握手"></a>TCP断开四次握手</h2><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>特性：</p><ol><li><p>面向无连接</p><ul><li>不需要向<code>TCP</code> 一样三次握手，想发数据就可以发</li><li>不会对数据报文进行任何拆分和拼接操作</li><li>发送端：应用层将数据传递给传输层的UDP协议，只会给数据增加一个<code>UDP</code> 头标识一下是 <code>UDP</code> 协议，然后就传递给网络层了 在接收端：网络层将数据传递给传输层，<code>UDP</code> 只取出IP报文头就传递给应用层，不会做任何拼接操作</li></ul></li><li><p>不可靠性</p><ul><li>体现在无连接上，通信不需要建立连接，想发就发，不可靠</li><li>收到什么数据就传递什么数据，不会备份数据，发送数据也不关心对方是否已经接收到数据了</li><li>不判断网络环境，<code>UDP</code> 无阻塞控制，一直以恒定速度发送数据，不会对发送速率进行调整。弊端是网络条件不好的情况下可能会导致丢包。 对实时性要求高的场景就需要使用UDP而不是TCP</li></ul></li><li><p>高效<br> <img src="/images/udp.png"></p><ul><li><code>UDP</code> 头部开销小，只有8个字节，TCP二十个字节</li><li>不可靠，不复杂，需要保证数据不丢失有序到达</li><li>两个十六位的端口号，Source port分别为源端口，Destination port目标端口  length整个数据报文的长度</li><li>checksum整个数据报文的检测，用于发现头部信息和数据中的错误</li></ul></li><li>传输方式<br> <code>UDP</code> 支持一对一，一对多，多对多，多对一，提供单播，多播，广播的功能</li><li>适合应用场景<br> 实时性要求高的场景，直播，游戏，视频会议</li></ol><p>##TCP UDP区别</p><ul><li>不需要向<code>TCP</code> 一样三次握手，想发数据就可以发</li><li>TCP 建立连接断开连接都需要先进行握手,TCP 传输数据过程中，通过各种算法保证数据可靠性。没有UDP高效</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何阅读源代码</title>
      <link href="/2018/02/17/howread/"/>
      <url>/2018/02/17/howread/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>当我们阅读面前的源码时，无非有以下几种目的：</p><ul><li>纯粹学习</li><li>添加新功能</li><li>重构旧代码</li><li>修复他人的Bug</li></ul><p>不同的目的会有不同的心情，会影响到工作的进展，像修复他人的Bug这种事情，类似于没被掰弯的男猿捏着鼻子给另外一个男人擦屁股，是很恶心的，很容易让人拒绝的。所以因这种目标而阅读源码，往往是欲拒还迎、欲说还休，效率较低。然而修复实际工作中帮别人修复Bug这种情形，十有八九你要遇到，无可逃避。所以，心理调试很重要。</p><p>为了学习去读源码，这是最愉快的最放松的。不过提醒一点，设定可检验的目标才会有收获，否则就会像走到大街上看见一美女擦肩而过那样，惊艳一下下，过后嘛关系嘛收获也没了。</p><p>其他的目的，重构旧代码、添加新功能，比帮别人擦屁股略强，因为他带有创造性，创造性的活动能给人带来强烈的愉悦，所以虽然这两种目的也有很多让人不爽的部分，不过想到我可以让一棵老树焕发青春，不爽也就慢慢弱下去了。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>工欲善其事必先利其器，这是亘古不变的道理。要很好的完成阅读源码的任务，我们大概需要下列这些工具：</p><ul><li>SourceInsight，最好的源码浏览工具，它能维护符号库，动态显示上下文，还能绘制调用关系图，最好的，没有之一</li><li>纸质笔记本，随时记录心得和疑惑，随时绘制各种图（类图、时序图、框图），比UML工具快，也比Visio快</li><li>中性笔</li><li>记事本、Notepad++、有道云笔记、为知笔记等，记录阅读源码过程中的关键点、心得体会、分析过程</li><li>Visio，用于绘制简单的框图，表述源码的模块划分、层次结构等</li><li>StartUML，用于最后绘制类图、时序图等，方便交流</li><li>扫描全能王（CamScanner），一款可以通过拍照达到扫描效果的App，可以用它扫描你在纸质笔记本上写下的文字，绘制的框图，分享给其他人，如果你懒得用软件绘制图标，那手绘之后扫描成电子档就最适合你了</li></ul><h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><p>前戏很重要，准备好了后面水到渠成快感不断，否则就会频频受挫直感道阻且长。</p><ul><li>业务基础，每一份有实际意义的源码都离不开业务，必须先对业务有概念</li><li>技术基础，这个源码用什么语言，什么框架，什么第三方模块，都需要先有所了解</li><li>文档，尽量找到业务、需求、概要、详细等文档，帮助会很大，然而，我们经常面临的情况是，只有源码，只有源码，只有源码，片言只字的文档也无，所以只好坚信——源码是最好的文档。这个心理门槛儿其实也容易过，你就想像着源码只是神仙姐姐的画像，看再多画像也不抵当面一眼效果强大——要么摧毁三观要么魂牵梦萦</li><li>人，搞明白哪个程序员维护过这份代码，方便后面不懂时请教，有时人家点一下顶你自己瞎琢磨一天</li></ul><h2 id="运行与开发环境"><a href="#运行与开发环境" class="headerlink" title="运行与开发环境"></a>运行与开发环境</h2><ul><li>配置好开发环境，目的是为了调试，对有些程序员来讲，调试是弄明白软件内部机理的最好方法，按着F5、F10、F11、F9，一切都搞定了</li><li>配置好运行环境，为使用软件、体验软件做准备，从用户角度，从外面看看软件到底是怎么回事，便于揣摩内部逻辑<br>笔记<br>在阅读源码的过程中，做笔记是必须的。我有这样的体会，因为代码不是自己写的，很难很快在脑子里刻下印记，经常是看着这里忘了那里，早上觉得弄懂了数据流向，中午吃个饭就忘了。所以，笔记就显得尤为重要。</li><li>找到适合你的记录方式，小本本、软件皆可。用软件（Notepad++、有道笔记、为知笔记等）来记录有个坏处——必须切换屏幕，会在形式上中断代码阅读过程。所以我经常在紧张得不能中断时随手用笔写些断句残章在本子上，告一段落时梳理下用软件再记录。</li><li>尽可能详细的记录，但不必看到什么记录什么，要间隔性的记录，比如弄明白了某个子模块的逻辑、某个类的作用、某些函数的调用关系时再记录，否则记录这个动作本身会打断思考</li><li>每天工作结束，记录进度（弄明白的部分），记录疑问，记录第二天要弄明白什么东西，这样你的工作状态就入栈了，第二天来了很容易出栈，快速进入工作状态</li><li>记录看到的优秀设计，提高审美，见贤思齐，自我成长</li></ul><h2 id="沧海遗珠"><a href="#沧海遗珠" class="headerlink" title="沧海遗珠"></a>沧海遗珠</h2><p>我在漫长的读码生涯里积攒了一些的经验，算是碎碎念，供参考：</p><ul><li>理清某一业务如何映射在代码执行流程上的，这点很关键。</li><li>理清不同模块间的业务关系，代码调用关系，很关键</li><li>调试是弄明白代码调用流程的最快方式，之一</li><li>找出关键代码（代表实际对象的类、衔接不同模块的类、代表业务关键节点的类）</li><li>分析日志可以帮助分析代码执行流程和业务流程</li><li>先用已有的可运行软件，体验业务，琢磨你点这里一下点那里一下代码可能是怎么做出反应的</li><li>阅读应该围绕目的，把实现目标放在第一位，比如修改Bug，如果有期限，在最后日期前搞定是第一要务，然后有时间就继续读源码或改进Bug修复方案，力求没有副作用和后遗症，再有时间就修修别人留下的破窗户（你也可以顺带鄙视下前任维护者）</li><li>千万次的问，还记得前面说要弄明白谁维护过你要读的代码吧，别不好意思，问吧，问吧，问吧</li><li>对着设计文档、接口文档或测试用例看代码</li><li>心理调试，勿畏难，别放弃。我有时看代码，看两天也不知道看了个甚，一头雾水两眼发花是常有的事儿，有时真是觉得搞不定了，然而，这要么是你基础知识没准备好，要么是你找错了入口，要知道，任何一份代码，都有一条隐形的线串着，耐心点，总会找到。这样不行就那样，多换换角度，多换换方法，读不行，就调试，调试不行，就运行，运行不行，就研究日志。</li><li>给自己设置小奖励，弄明白某个逻辑或某个模块的代码后奖励自己休息一下，5~10分钟，走出办公室转转，或者干脆在网上瞎逛一下，浏览自己喜欢的网站</li><li>读不懂才要读，想不明白才要想，这是进步和成长的开始。那些阻挡你的蹂躏你的而杀又不死你的，终将帮助你成长让你变得更强大。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记</title>
      <link href="/2018/01/24/vuenote/"/>
      <url>/2018/01/24/vuenote/</url>
      
        <content type="html"><![CDATA[<h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>:<span class="string">"poetries "</span>&#125;</span><br><span class="line">observe(data)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).innerText = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Watcher(data,<span class="string">'name'</span>,update)</span><br><span class="line"></span><br><span class="line">data.name = <span class="string">'yyy'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj||<span class="keyword">typeof</span> obj!==<span class="string">'object'</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123; </span><br><span class="line">        defineReactive(obj,key,obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj,key,val</span>) </span>&#123;</span><br><span class="line">    observe(val)</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj,key,&#123; </span><br><span class="line">        enumerable:<span class="literal">true</span>, </span><br><span class="line"></span><br><span class="line">        configurable:<span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        get:<span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'get value'</span>)</span><br><span class="line">            <span class="keyword">if</span>(Dep.target)&#123; </span><br><span class="line">                dep.addSub(Dep.target)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        set:<span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'change value'</span>)</span><br><span class="line">            val = newValue</span><br><span class="line">            dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span></span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>()&#123; </span><br><span class="line">        <span class="keyword">this</span>.subs=[]</span><br><span class="line">    &#125;</span><br><span class="line">    addSub(sub)&#123; </span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">    &#125;</span><br><span class="line">    notify()&#123; </span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span>=&gt;</span>&#123; </span><br><span class="line">            sub.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Dep.target=<span class="literal">null</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(obj,key,cb)&#123; </span><br><span class="line">        </span><br><span class="line">        Dep.target =<span class="keyword">this</span></span><br><span class="line">        <span class="keyword">this</span>.cb=cb</span><br><span class="line">        <span class="keyword">this</span>.obj=obj</span><br><span class="line">        <span class="keyword">this</span>.key=key</span><br><span class="line">        <span class="keyword">this</span>.value = obj[key]</span><br><span class="line">        Dep.target = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.obj[<span class="keyword">this</span>.key]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.cb(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue有几个问题，Object.defineProperty不能拦截数组操作</span></span><br><span class="line"><span class="comment">//新增对象属性不触发组件渲染的问题</span></span><br><span class="line"><span class="comment">//Vue通过函数重写的方式解决了这个问题。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">target:Array&lt;any&gt;|Object,key:any,val:any</span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(target)&amp;&amp;isValidArrayIndex(key))&#123; </span><br><span class="line">        <span class="comment">//调用splice函数派发更新</span></span><br><span class="line">        target.length = <span class="built_in">Math</span>.max(target.length,key)</span><br><span class="line">        target.splice(key,<span class="number">1</span>,val)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(key <span class="keyword">in</span> target &amp;&amp;!(key <span class="keyword">in</span> <span class="built_in">Object</span>.prototype))&#123; </span><br><span class="line">        target[key] = val</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> ob =(target:any).__ob__</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!ob)&#123; </span><br><span class="line">        target[key] = val</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    defineReactive(ob.value,key,value)</span><br><span class="line"></span><br><span class="line">    ob.dep.notify()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决Array的一些方法无法触发响应式的问题。</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [ </span><br><span class="line">    <span class="string">'push'</span>,</span><br><span class="line">    <span class="string">'pop'</span>,</span><br><span class="line">    <span class="string">'shift'</span>,</span><br><span class="line">    <span class="string">'unshift'</span>,</span><br><span class="line">    <span class="string">'splice'</span>,</span><br><span class="line">    <span class="string">'sort'</span>,</span><br><span class="line">    <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line"></span><br><span class="line">    def(arrayMethods,method,<span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params">...args</span>)</span>&#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>,args)</span><br><span class="line">        <span class="keyword">const</span> ob =<span class="keyword">this</span>.__ob__</span><br><span class="line">        <span class="keyword">let</span> inserted</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">                inserted = args</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">                inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(inserted) ob.observeArray(inserted)</span><br><span class="line">        ob.dep.notify()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-link用法"><a href="#router-link用法" class="headerlink" title="router-link用法"></a>router-link用法</h2><ol><li><p>router-link默认渲染为<figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```html</span><br><span class="line">&lt;router-link tag=&quot;a&quot; :to=&quot;&apos;/city/&apos; + guessCityid&quot; class=&quot;guess_city&quot;&gt;</span><br><span class="line"> &lt;span&gt;&#123;&#123;guessCity&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line">渲染为</span><br><span class="line">&lt;a data-v-3ea254f4=&quot;&quot; href=&quot;#/city/2&quot; class=&quot;guess_city&quot;&gt;&lt;span data-v-3ea254f4=&quot;&quot;&gt;杭州&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>router-link tag属性可设置为li,span等等,渲染为li,span</p></li><li><p>:to内有path, query参数 path负责切换路由，query为路由参数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: '/food', query: &#123;geohash, title: foodItem.title, restaurant_category_id: getCategoryId(foodItem.link)&#125;&#125;"</span> <span class="attr">v-for</span>=<span class="string">"foodItem in item"</span> <span class="attr">:key</span>=<span class="string">"foodItem.id"</span> <span class="attr">class</span>=<span class="string">"link_to_food"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">渲染为</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-v-070ab150</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"#/food?geohash=30.26276,120.21403&amp;amp;title=%E5%95%86%E8%B6%85%E4%BE%BF%E5%88%A9&amp;amp;restaurant_category_id=252"</span> <span class="attr">class</span>=<span class="string">"link_to_food"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue项目中props-data-中数据的区别"><a href="#Vue项目中props-data-中数据的区别" class="headerlink" title="Vue项目中props,data()中数据的区别"></a>Vue项目中props,data()中数据的区别</h2><ul><li>props用于存放模板，其他函数运行时需要的变量；接住父模板传递过来的参数；也可以是模板运行时的函数名称。</li><li>data(){ }存放响应式的变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">offset: <span class="number">0</span>, <span class="comment">// 批次加载店铺列表，每次加载20个 limit = 20</span></span><br><span class="line">shopListArr:[], <span class="comment">// 店铺列表数据</span></span><br><span class="line">preventRepeatReuqest: <span class="literal">false</span>, <span class="comment">//到达底部加载数据，防止重复加载</span></span><br><span class="line">showBackStatus: <span class="literal">false</span>, <span class="comment">//显示返回顶部按钮</span></span><br><span class="line">showLoading: <span class="literal">true</span>, <span class="comment">//显示加载动画</span></span><br><span class="line">touchend: <span class="literal">false</span>, <span class="comment">//没有更多数据</span></span><br><span class="line">imgBaseUrl,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line"><span class="keyword">this</span>.initData();</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">loading,</span><br><span class="line">ratingStar,</span><br><span class="line">&#125;,</span><br><span class="line">props: [<span class="string">'restaurantCategoryId'</span>, <span class="string">'restaurantCategoryIds'</span>, <span class="string">'sortByType'</span>, <span class="string">'deliveryMode'</span>, <span class="string">'supportIds'</span>, <span class="string">'confirmSelect'</span>, <span class="string">'geohash'</span>],</span><br><span class="line">mixins: [loadMore, getImgPath],</span><br><span class="line">computed: &#123;</span><br><span class="line">...mapState([</span><br><span class="line"><span class="string">'latitude'</span>,<span class="string">'longitude'</span></span><br><span class="line">]),</span><br><span class="line">&#125;,</span><br><span class="line">updated()&#123;</span><br><span class="line"><span class="comment">// console.log(this.supportIds, this.sortByType)</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="keyword">async</span> initData()&#123;</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> shopList(<span class="keyword">this</span>.latitude, <span class="keyword">this</span>.longitude, <span class="keyword">this</span>.offset, <span class="keyword">this</span>.restaurantCategoryId);</span><br><span class="line">            ....</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//到达底部加载更多数据</span></span><br><span class="line"><span class="keyword">async</span> loaderMore()&#123;</span><br><span class="line">            ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//返回顶部</span></span><br><span class="line">backTop()&#123;</span><br><span class="line">            ...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//监听父级传来的数据发生变化时，触发此函数重新根据属性值获取数据</span></span><br><span class="line"><span class="keyword">async</span> listenPropChange()&#123;</span><br><span class="line">            ...</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line"><span class="comment">//监听父级传来的restaurantCategoryIds，当值发生变化的时候重新获取餐馆数据，作用于排序和筛选</span></span><br><span class="line">restaurantCategoryIds: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenPropChange();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//监听父级传来的排序方式</span></span><br><span class="line">sortByType: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenPropChange();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//监听父级的确认按钮是否被点击，并且返回一个自定义事件通知父级，已经接收到数据，此时父级才可以清除已选状态</span></span><br><span class="line">confirmSelect: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenPropChange();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue项目中模板传递数据-条件判断写法"><a href="#Vue项目中模板传递数据-条件判断写法" class="headerlink" title="Vue项目中模板传递数据,条件判断写法"></a>Vue项目中模板传递数据,条件判断写法</h2><p>Head.vue 抽象基础模板</p><ul><li>对外暴露的参数写法均为驼峰式 goBack headTitle signinUp</li><li>slot name = ‘logo/search/edit’ 占位卡槽</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">'head_top'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'logo'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'search'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"head_goback"</span> <span class="attr">v-if</span>=<span class="string">"goBack"</span> @<span class="attr">click</span>=<span class="string">"$router.go(-1)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"userInfo? '/profile':'/login'"</span> <span class="attr">v-if</span>=<span class="string">'signinUp'</span> <span class="attr">class</span>=<span class="string">"head_login"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"user_avatar"</span> <span class="attr">v-if</span>=<span class="string">"userInfo"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"#user"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"login_span"</span> <span class="attr">v-else</span>&gt;</span>登录|注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"title_head ellipsis"</span> <span class="attr">v-if</span>=<span class="string">"headTitle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title_text"</span>&gt;</span>&#123;&#123;headTitle&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"edit"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Home.vue </p><p>* 将head.vue作为基础模板引入</p><ul><li>传递参数用 连接字符命名 signin-up对应参数signinUp </li><li><figure class="highlight plain"><figcaption><span>slot</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">```html</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">        &lt;head-top signin-up=&apos;home&apos;&gt;</span><br><span class="line">            &lt;span slot=&apos;logo&apos; class=&quot;head_logo&quot;  @click=&quot;reload&quot;&gt;&lt;!--ele.me--&gt;首页&lt;/span&gt;</span><br><span class="line">            &lt;!--传入公共模板head.vue的占位卡槽--&gt;</span><br><span class="line">        &lt;/head-top&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import headTop from &apos;head.vue&apos;</span><br><span class="line">    export default &#123; </span><br><span class="line">        data()&#123; &#125;</span><br><span class="line">        mounted()&#123; &#125;</span><br><span class="line">        components:&#123;</span><br><span class="line">            headTop //模板中可以使用head-top载入</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //点击图标刷新页面</span><br><span class="line">            reload()&#123;</span><br><span class="line">                window.location.reload();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>几种数据展示方式</p></li></ul><ol><li>head-top 导入的组件</li><li>:head-title -&gt; v-bind:head-title go-back 子模板接口</li><li>cityname placelist nextpage 当前模板变量小写名称，函数名称</li><li>slot=”changecity”卡槽名称</li><li> 不在””内，对外暴露的模板参数</li><li>class=”title_head ellipsis” 模板类名</li><li>v-for=”(item, index) in placelist” each数据操作</li><li>@click 模板绑定方法</li><li>:key=”index” -&gt;v-bind:key=”index” 性能优化方法</li><li>  不在””内，当前对象的字面量值</li><li>:class=”{choose_type:sortBy == ‘food’}” class判断逻辑</li></ol><p>一小段代码就能弄出11条指令的不同用法，Vue其实也不方便。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">parent1.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">head-top</span> <span class="attr">:head-title</span>=<span class="string">"cityname"</span> <span class="attr">go-back</span>=<span class="string">'true'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">slot</span>=<span class="string">"changecity"</span> <span class="attr">class</span>=<span class="string">"change_city"</span>&gt;</span>切换城市<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head-top</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in placelist"</span> @<span class="attr">click</span>=<span class="string">'nextpage(index, item.geohash)'</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sort_item"</span> <span class="attr">:class</span>=<span class="string">"&#123;choose_type:sortBy == 'food'&#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"pois_name ellipsis"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pois_address ellipsis"</span>&gt;</span>&#123;&#123;item.address&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">basic.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"title_head ellipsis"</span> <span class="attr">v-if</span>=<span class="string">"headTitle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title_text"</span>&gt;</span>&#123;&#123;headTitle&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="webpack中利用require-ensure-实现按需加载"><a href="#webpack中利用require-ensure-实现按需加载" class="headerlink" title="webpack中利用require.ensure()实现按需加载"></a>webpack中利用require.ensure()实现按需加载</h2><ol><li>空数组作为参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码保证了拆分点被创建，而且 a.js 被 webpack 分开打包。</p><ol start="2"><li>依赖作为参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./a.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>  上面代码， a.js 和 b.js 都被打包到一起，而且从主文件束中拆分出来。但只有 b.js 的内容被执行。a.js 的内容仅仅是可被使用，但并没有被输出。</p><p>  想去执行 a.js，我们需要异步地引用它，如 require(‘./a.js’)，让它的 JavaScritp 被执行。</p><ol start="3"><li>单独打包成自己写的名字配置<br>  需要配置chunkFilename,和publicPath。publicPath是按需加载单独打包出来的chunk是以publicPath会基准来存放的，chunkFilename:[name].js这样才会最终生成正确的路径和名字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry:<span class="string">'./js/entry.js'</span>,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"./dist"</span>),</span><br><span class="line">        filename:<span class="string">'js/a.bundle.js'</span>,</span><br><span class="line">        publicPath:<span class="string">"./"</span>,</span><br><span class="line">        chunkFilename:<span class="string">'js/[name].js'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>所以router/index.js 修改为懒加载组件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Province = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Province.vue'</span>)), <span class="string">'chunkname1'</span>)</span><br><span class="line"><span class="keyword">const</span> Segment = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Segment.vue'</span>)), <span class="string">'chunkname2'</span>)</span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Loading.vue'</span>)), <span class="string">'chunkname3'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/User.vue'</span>)), <span class="string">'chunkname3'</span>)</span><br></pre></td></tr></table></figure></p><p>  根据 chunkame的不同, 上面的四个组件, 将会被分成3个块打包,最终打包之后与组件相关的js文件会分为3个 (除了app.js,manifest.js, vendor.js)</p><hr><p><a href="https://github.com/DDFE/DDFE-blog/issues/11" target="_blank" rel="noopener">VueRouter代码详解</a></p><p>main.js<br>import routes from ‘./router/router’<br>console.log(routes)</p><p>/router/router.js<br>import App from ‘../App’<br>console.log(App);<br><img src="/images/1.jpg" width="400"></p><hr><h2 id="Vuex-用Object-assign-修改数据"><a href="#Vuex-用Object-assign-修改数据" class="headerlink" title="Vuex 用Object.assign 修改数据"></a>Vuex 用Object.assign 修改数据</h2><figure class="highlight plain"><figcaption><span>src</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改用户名</span><br><span class="line">[RETSET_NAME](state,username) &#123;</span><br><span class="line">    state.userInfo = Object.assign(&#123;&#125;, state.userInfo,&#123; username &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="VuePress文档系统搭建"><a href="#VuePress文档系统搭建" class="headerlink" title="VuePress文档系统搭建"></a>VuePress文档系统搭建</h2><p><a href="https://segmentfault.com/a/1190000015237352" target="_blank" rel="noopener">链接</a></p><hr><h2 id="深度观测如何实现？"><a href="#深度观测如何实现？" class="headerlink" title="深度观测如何实现？"></a>深度观测如何实现？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_traverse</span> (<span class="params">val: any, seen: SimpleSet</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, keys</span><br><span class="line">  <span class="keyword">const</span> isA = <span class="built_in">Array</span>.isArray(val)</span><br><span class="line">  <span class="keyword">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class="built_in">Object</span>.isFrozen(val) || val <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (val.__ob__) &#123;    </span><br><span class="line">        <span class="keyword">const</span> depId = val.__ob__.dep.id    </span><br><span class="line">        <span class="keyword">if</span> (seen.has(depId)) &#123;     <span class="keyword">return</span>    &#125;    </span><br><span class="line">        seen.add(depId)  </span><br><span class="line">  &#125; <span class="keyword">if</span> (isA) &#123;</span><br><span class="line">    i = val.length</span><br><span class="line">    <span class="keyword">while</span> (i—) </span><br><span class="line">        _traverse(val[i], seen)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    keys = <span class="built_in">Object</span>.keys(val)</span><br><span class="line">    i = keys.length</span><br><span class="line">    <span class="keyword">while</span> (i—) </span><br><span class="line">        _traverse(val[keys[i]], seen)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">get()&#123;</span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</span><br><span class="line">        traverse(value) <span class="comment">////这深度观测有毛用，value也拿不到啊</span></span><br><span class="line">    &#125;</span><br><span class="line">    popTarget()</span><br><span class="line">        <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="最新版的nextTick不是走宏任务，微任务的逻辑，是根据终端的特性判断。"><a href="#最新版的nextTick不是走宏任务，微任务的逻辑，是根据终端的特性判断。" class="headerlink" title="最新版的nextTick不是走宏任务，微任务的逻辑，是根据终端的特性判断。"></a>最新版的nextTick不是走宏任务，微任务的逻辑，是根据终端的特性判断。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        p.then(flushCallbacks)</span><br><span class="line">        <span class="keyword">if</span> (isIOS) setTimeout(noop)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">'undefined'</span> &amp;&amp; (isNative(MutationObserver) || MutationObserver.toString() === <span class="string">'[object MutationObserverConstructor]'</span></span><br><span class="line">)) &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks)</span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter))</span><br><span class="line">    observer.observe(textNode, &#123;</span><br><span class="line">        characterData: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">        textNode.data = <span class="built_in">String</span>(counter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">    timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setImmediate(flushCallbacks)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Mutation Observer API</span></span><br><span class="line"><span class="string">[使用MutationObserver跟踪DOM的改变 ] (https://segmentfault.com/a/1190000014738092)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##nextTick如何理解 ??</span></span><br><span class="line"><span class="string">其实最好理解的方式就是把 nextTick 看做 setTimeout(fn, 0)</span></span><br><span class="line"><span class="string"> Vue 是一个数据驱动的框架，如果能在UI重渲染之前更新所有数据状态，这对性能的提升是一个很大的帮助，所有要优先选用 microtask(微任务) 去更新数据状态而不是 (macro)task(宏任务)，这就是为什么不使用 setTimeout 的原因，因为 setTimeout 会将回调放到 (macro)task 队列中而不是 microtask 队列，所以理论上最优的选择是使用 Promise，当浏览器不支持 Promise 时再降级为 setTimeout</span></span><br><span class="line"><span class="string">UIWebViews 中存在很奇怪的问题，即 microtask 没有被刷新，对于这个问题的解决方案就是让浏览做一些其他的事情比如注册一个 (macro)task 即使这个 (macro)task 什么都不做，这样就能够间接触发 microtask 的刷新。</span></span><br></pre></td></tr></table></figure><p>if (typeof Promise !== ‘undefined’ &amp;&amp; isNative(Promise)) {<br>    const p = Promise.resolve()<br>    timerFunc = () =&gt; {<br>    p.then(flushCallbacks)<br>// In problematic UIWebViews, Promise.then doesn’t completely break, but<br>// it can get stuck in a weird state where callbacks are pushed into the<br>// microtask queue but the queue isn’t being flushed, until the browser<br>// needs to do some other work, e.g. handle a timer. Therefore we can<br>// “force” the microtask queue to be flushed by adding an empty timer.<br>        if (isIOS) setTimeout(noop)<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 什么是异步更新队列？</span><br><span class="line">queueWatcher 函数的作用就是我们前面讲到过的，它将观察者放到一个队列中等待所有突变完成之后统一执行更新。</span><br><span class="line"></span><br><span class="line">## !this.depIds.has(id) &#123; dep.addSub(this) &#125; 在依赖收集逻辑里，这条语句为何可以控制重复收集？</span><br><span class="line">* 1、newDepIds 属性用来在一次求值中避免收集重复的观察者</span><br><span class="line">* 2、每次求值并收集观察者完成之后会清空 newDepIds 和 newDeps 这两个属性的值，并且在被清空之前把值分别赋给了 depIds 属性和 deps 属性</span><br><span class="line">* 3、depIds 属性用来避免重复求值时收集重复的观察者</span><br><span class="line">通过以上三点内容我们可以总结出一个结论，即 newDepIds 和 newDeps 这两个属性的值所存储的总是当次求值所收集到的 Dep 实例对象，而 depIds 和 deps 这两个属性的值所存储的总是上一次求值过程中所收集到的 Dep 实例对象。</span><br><span class="line">```js</span><br><span class="line">addDep (dep: Dep) &#123;</span><br><span class="line">    const id = dep.id</span><br><span class="line">    if (!this.newDepIds.has(id)) &#123;</span><br><span class="line">        this.newDepIds.add(id)</span><br><span class="line">        this.newDeps.push(dep)</span><br><span class="line">        if (!this.depIds.has(id)) &#123;</span><br><span class="line">            dep.addSub(this)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>答：watch 在get函数中 finally 语句块内调用了观察者对象的 cleanupDeps 方法，这个方法的作用在于 每次求值完毕后都会使用 depIds 属性和 deps 属性保存 newDepIds 属性和 newDeps 属性的值，然后再清空 newDepIds 属性和 newDeps 属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">get () &#123;</span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">       ....</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123; traverse(value)</span><br><span class="line">    &#125;   </span><br><span class="line">        popTarget()</span><br><span class="line">        <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line">cleanupDeps () &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">this</span>.deps[i]</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">      dep.removeSub(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="keyword">this</span>.depIds  </span><br><span class="line">  <span class="keyword">this</span>.depIds = <span class="keyword">this</span>.newDepIds  </span><br><span class="line">  <span class="keyword">this</span>.newDepIds = tmp</span><br><span class="line">  <span class="keyword">this</span>.newDepIds.clear()</span><br><span class="line">  tmp = <span class="keyword">this</span>.deps</span><br><span class="line">  <span class="keyword">this</span>.deps = <span class="keyword">this</span>.newDeps</span><br><span class="line">  <span class="keyword">this</span>.newDeps = tmp</span><br><span class="line">  <span class="keyword">this</span>.newDeps.length = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>vm._render 函数的作用是调用 vm.$options.render 函数并返回生成的虚拟节点(vnode)<br>vm._update 函数的作用是把 vm._render 函数生成的虚拟节点渲染成真正的DOM</p><blockquote><p>问题？1虚拟节点vnode是什么？</p><blockquote><p>2如何渲染虚拟节点<br>vm.$el是什么？</p></blockquote></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#foo&apos;,</span><br><span class="line">  template: &apos;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;’</span><br><span class="line">&#125;)</span><br><span class="line">vm.$el 是 id 为 bar 的 div 的引用 即为&apos;&lt;div id=&quot;bar&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="理解-Vue中的Render渲染函数-，Vue-createElement方法"><a href="#理解-Vue中的Render渲染函数-，Vue-createElement方法" class="headerlink" title="理解 Vue中的Render渲染函数 ，Vue.createElement方法"></a>理解 Vue中的Render渲染函数 ，Vue.createElement方法</h2><p><a href="https://www.cnblogs.com/tugenhua0707/p/7528621.html" target="_blank" rel="noopener">link</a></p><h2 id="Vue-set不能在根节点上添加属性。"><a href="#Vue-set不能在根节点上添加属性。" class="headerlink" title="Vue.set不能在根节点上添加属性。"></a>Vue.set不能在根节点上添加属性。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">obj: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    __ob__ <span class="comment">// ob2</span></span><br><span class="line">&#125;,</span><br><span class="line">__ob__ <span class="comment">// ob1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    data</span><br><span class="line">&#125;)</span><br><span class="line">Vue.set(data, <span class="string">'someProperty'</span>, <span class="string">'someVal'</span>)</span><br><span class="line"><span class="comment">//不允许在根对象上添加属性</span></span><br></pre></td></tr></table></figure><h2 id="Vue-set是干什么用的？"><a href="#Vue-set是干什么用的？" class="headerlink" title="Vue.set是干什么用的？"></a>Vue.set是干什么用的？</h2><p>Vue 是没有能力拦截到为一个对象(或数组)添加属性(或元素)的，<br>而 Vue.set 和 Vue.delete 就是为了解决这个问题而诞生的。同时为了方便使用<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ins = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    arr: [<span class="number">1</span>, <span class="number">2</span>]  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ins.$data.arr[<span class="number">0</span>] = <span class="number">3</span> <span class="comment">// 不能触发响应</span></span><br><span class="line">ins.$set(ins.$data.arr, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">// 能够触发响应</span></span><br></pre></td></tr></table></figure></p><p>##如何理解Vue里defineReactive这个函数？<br>defineReactive 这个函数包含 Object.defineProperty这个关键函数。在Vue源码里主要负责取data中的key，value。<br><br>在Object.defineProperty 外部new Dep实例。 为每个data的key 闭包绑定一个Dep，负责在get，set外部传入Dep<br><br>get 一个是返回正确的属性值，另一个是收集依赖。 Dep.target.depend() <br><br>set 函数也要完成两个重要的事情，第一正确地为属性设置新值，第二是能够触发相应的依赖。notify</p><h2 id="Vue-set如何触发依赖收集？"><a href="#Vue-set如何触发依赖收集？" class="headerlink" title="Vue.set如何触发依赖收集？"></a>Vue.set如何触发依赖收集？</h2><p>$set 或 Vue.set 给数据对象添加新属性时触发，我们知道由于 js 语言的限制，在没有 Proxy 之前 Vue 没办法拦截到给对象添加属性的操作。<br><br>所以 Vue 才提供了 $set 和 Vue.set 等方法让我们有能力给对象添加新属性的同时触发依赖，那么触发依赖是怎么做到的呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.set = <span class="function"><span class="keyword">function</span> (<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  defineReactive(obj, key, val)</span><br><span class="line">  obj.__ob__.dep.notify()  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>notify 调用watch.run，确认data依赖，变更oldVal = newVal, 执行callback</p><h2 id="vue2-0中的组件的继承与扩展"><a href="#vue2-0中的组件的继承与扩展" class="headerlink" title="vue2.0中的组件的继承与扩展"></a>vue2.0中的组件的继承与扩展</h2><p><a href="https://www.jianshu.com/p/c43c4fde14af" target="_blank" rel="noopener">link</a></p><p>一、slot<br>1.默认插槽和匿名插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"itany"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-hello</span>&gt;</span>180812<span class="tag">&lt;/<span class="name">my-hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>welcome to xiamen<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>如果没有原内容，则显示该内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span> //默认插槽</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm =<span class="keyword">new</span> Vue(&#123; </span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#itany'</span>,</span></span><br><span class="line"><span class="undefined">            components:&#123; </span></span><br><span class="line"><span class="javascript">                <span class="string">'my-hello'</span>:&#123; </span></span><br><span class="line"><span class="javascript">                    template:<span class="string">'#hello'</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.具名插槽<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"itany"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot</span>=<span class="string">"s1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">slot</span>=<span class="string">"s2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-hello</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"s2"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>welcome to xiamen<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#itany'</span>,</span></span><br><span class="line"><span class="undefined">        components:&#123; </span></span><br><span class="line"><span class="javascript">            <span class="string">'my-hello'</span>:&#123;</span></span><br><span class="line"><span class="javascript">                template:<span class="string">'#hello'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>二、mixins<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般有两种用途：</span><br><span class="line">1、在你已经写好了构造器后，需要增加方法或者临时的活动时使用的方法，这时用混入会减少源代码的污染。</span><br><span class="line">2、很多地方都会用到的公用方法，用混入的方法可以减少代码量，实现代码重用。</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mixins<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num:&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>增加数量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> addLog = &#123;</span></span><br><span class="line"><span class="javascript">        updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"数据发生变化，变化成"</span>+<span class="keyword">this</span>.num+<span class="string">"."</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    Vue.Mixin(&#123; </span></span><br><span class="line"><span class="javascript">        updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是全局的混入"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//执行顺序.全局混入的执行顺序要前于混入和组件里的方法。</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123; </span></span><br><span class="line"><span class="javascript">        el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123; </span></span><br><span class="line"><span class="undefined">            num:1</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123; </span></span><br><span class="line"><span class="javascript">            add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        updated()&#123; </span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是原生update"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        mixins:[addLog]</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三丶extends<br>1 extends用法<br>  extends选项允许声明扩展另一个组件，而无需使用 Vue.extend。它和混入mixins非常的类似。<strong>只不过接收的参数是简单的选项对象或构造函数</strong>,所以extends只能单次扩展一个组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Extends<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    num:&#123;&#123; num &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> bbb = &#123;</span></span><br><span class="line"><span class="undefined">        updated() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是被扩展出来的"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//跟原生的方法冲突，取原生的方法，这点跟混入一样</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'我是被扩展出来的add方法！'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            num: 1</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'我是原生add方法'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        updated() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我是扩展出来的"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        extends: bbb //<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>接收对象和函数<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>四 extend<br>    Vue.extend只是创建一个构造器,它是为了创建可复用的组件。其主要用来服务于Vue.component，用来生成组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"itany"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-world</span>&gt;</span><span class="tag">&lt;/<span class="name">my-world</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.使用Vue.extend()创建一个组件构造器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> MyComponent = Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">            template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">     <span class="comment">//2.使用Vue.component(标签名,组件构造器)，根据组件构造器来创建组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'hello'</span>, MyComponent); </span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'my-world'</span>, &#123;</span></span><br><span class="line"><span class="xml">            template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123; <span class="comment">//这里的vm也是一个组件，称为根组件Root</span></span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#itany'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;&#125;</span></span><br><span class="line"><span class="undefined">    &#125;); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="propsdata是干什么的？"><a href="#propsdata是干什么的？" class="headerlink" title="propsdata是干什么的？"></a>propsdata是干什么的？</h2><p>propsdata 创建实例时传递 props。主要作用是方便测试。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = Vue.extend(&#123;</span><br><span class="line">  props: [<span class="string">'msg'</span>],</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Comp(&#123;</span><br><span class="line">  propsData: &#123;</span><br><span class="line">    msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Vue源码里选项合并有两种方式"><a href="#Vue源码里选项合并有两种方式" class="headerlink" title="Vue源码里选项合并有两种方式"></a>Vue源码里选项合并有两种方式</h2><p>1 主动调用 外部调用场景new Vue(options) 的方式实例化一个 Vue 对象；另一种是我们上一节分析的组件过程中内部通过 new Vue(options) 实例化子组件。<br>都会执行实例的 _init(options) 方法，它首先会执行一个 merge options 的逻辑，相关的代码在 src/core/instance/init.js 中：<br>2 组件场景<br>Vue.extend父子传递, extends父子传递,mixins, new Vue等等，propsData父子传递，如何对父子选项进行合并处理的，也知道了它的作用<br>源代码看起来总之很麻烦</p><hr><h2 id="怎么看Vue源代码？"><a href="#怎么看Vue源代码？" class="headerlink" title="怎么看Vue源代码？"></a>怎么看Vue源代码？</h2><p>发现Vue源码里typescript的语法很适合看代码。有参数函数返回值，非常直观。<br>配合文档<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a>  <a href="http://hcysun.me/vue-design/一步一步看还是比较舒服的。" target="_blank" rel="noopener">http://hcysun.me/vue-design/一步一步看还是比较舒服的。</a></p><hr><p>Vue生命周期图详解 <a href="https://segmentfault.com/a/1190000008570622" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008570622</a><br>Vue2.0 $set() <a href="https://blog.csdn.net/panyang01/article/details/76665448" target="_blank" rel="noopener">https://blog.csdn.net/panyang01/article/details/76665448</a><br>mounted () {<br>    this.$set(this.student,”age”, 24)  $set()方法，既可以新增属性,又可以触发视图更新。<br>}</p><hr><h2 id="如何实现一个简单的Vue"><a href="#如何实现一个简单的Vue" class="headerlink" title="如何实现一个简单的Vue?"></a>如何实现一个简单的Vue?</h2><ul><li>每一个v-html, v-text等带有的表达式 内部都有一个Watch对象，在compile模板的过程中，递归fragment，绑定对应事件过程进行的。</li><li>编译过程为逐行编译，并非统一编译。 比如碰到一个 编译过程中直接填上data ，new一个watcher绑定到当前指令上,watcher内部再取一次<br> 的值，触发一次this.get( ) Dep.target = this; 拿到name的值，这个过程中触发defineProperty get( )建立 dep和watch的关系。</li><li>watch里的this.depIds ={ } 把dep 压入进去， dep里的 this.subs=[ ] 把watch放进去</li><li>一个watch里面只能有一个dep,  一个dep里面可以有多个watch  (dep其实就是可动态更改的对象数目)<br>（watch是模板指令数目）对象在模板上可以对应多个指令进行模板修改。</li><li>当method通过addEventListener触发是，Observer监测到对象有变化，在set( )方法里调用Dep的notify方法，对保存在Dep里的Watch进行迭代，调用Watch里的update方法，update方法拿到新set的对象的值，对比老对象的值，调用各个指令节点绑定的方法，进行指令替换。</li></ul><p><img src="/images/原理图.png"><br>new MVVM 构造函数里。  </p><ol><li>解析指令 解析模板里的指令。<br> 初始化视i图-&gt; 逐行解析指令，把属性值填入到指令里。<br> 订阅数据变化-&gt; 把属性值填入指令里下面接着就绑定给指令节点绑定更新函数，并new一个Watch对象。绑定到当前指令上,watcher构建的时再取<br>  指令的值，拿到name的值,触发一次this.get( )<br> 添加订阅者 -&gt; Dep.target = this; 这个过程中触发defineProperty get( )建立 dep和watch的关系。<br> watch里的this.depIds ={ } 把dep 压入进去， dep里的 this.subs=[ ] 把watch放进去<br> 一个watch里面只能有一个dep,  一个dep里面可以有多个watch  (dep其实就是可动态更改的对象数目)<br>（watch是模板指令数目）对象在模板上可以对应多个指令进行模板修改。</li><li>监听属性，Observer 给每个对象变量进行劫持。并初始化Dep对象，以便进行闭包调用</li><li>当method通过addEventListener触发是，Observer监测到对象有变化，在set( )方法里调用Dep的notify方法，对保存在Dep里的Watch进行迭代，调用Watch里的update方法，update方法拿到新set的对象的值，对比老对象的值，调用各个指令节点绑定的方法，进行指令替换。</li></ol><hr><h2 id="SSR服务端渲染"><a href="#SSR服务端渲染" class="headerlink" title="SSR服务端渲染"></a>SSR服务端渲染</h2><p><a href="https://www.cnblogs.com/running-runtu/p/8993499.html" target="_blank" rel="noopener">link</a></p><h2 id="Vue在项目中的使用"><a href="#Vue在项目中的使用" class="headerlink" title="Vue在项目中的使用"></a>Vue在项目中的使用</h2><p>（下面全部搞懂了，Vue基本就会用了。）</p><ul><li><p>Vue模板中所有的数据字段由数据库接管。</p></li><li><p>Vue数据流：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    单页面组件数据，data()&#123; this.data=..&#125;   用来写入template。</span><br><span class="line">    props父亲传子组件数据，父子数据传递</span><br><span class="line">    Vuex全局组件共享数据源，记录APP共享的状态机</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue生命周期：</p></li><li>Vue路由对象使用 VueRouter  </li><li>VueLoader（载入程序） js, scss sass，css，less typescript转换工具</li><li>Vue服务端渲染（未知）</li></ul><hr><h2 id="VueX-在项目里是怎么用的？"><a href="#VueX-在项目里是怎么用的？" class="headerlink" title="VueX 在项目里是怎么用的？"></a>VueX 在项目里是怎么用的？</h2><pre><code>import {mapState, mapActions} from &apos;vuex&apos;export default {    data(){        return{        }    },    mounted(){        //获取用户信息        this.getUserInfo();    },    props: [&apos;signinUp&apos;, &apos;headTitle&apos;, &apos;goBack&apos;],    computed: {        ...mapState([            &apos;userInfo&apos;        ]),          //映射this.userInfo 为 store.state.userInfo        //this.userInfo = store.state.userInfo;        //this.userInfo没有在data里声明，template也可以直接拿来用。    },    methods: {        ...mapActions([            &apos;getUserInfo&apos;        ]),        //this.getUserInfo没有声明，可以直接拿来用。    },}</code></pre><h2 id="webpackBootstrap"><a href="#webpackBootstrap" class="headerlink" title="webpackBootstrap"></a>webpackBootstrap</h2><p><a href="https://segmentfault.com/a/1190000006814420" target="_blank" rel="noopener">link</a><br><a href="https://blog.csdn.net/haodawang/article/details/77126686" target="_blank" rel="noopener">link</a></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>px rem的区别  <a href="https://www.cnblogs.com/huanghuali/p/6931080.html" target="_blank" rel="noopener">https://www.cnblogs.com/huanghuali/p/6931080.html</a></li><li>在根元素<html>中定义了一个基本字体大小为62.5%（也就是10px。设置这个值主要方便计算，如果没有<br>设置，将是以“16px”为基准 ）；对于只需要适配少部分手机设备，且分辨率对页面影响不大的，使用px即可<br>对于需要适配各种移动设备，使用rem，例如只需要适配iPhone和iPad等分辨率差别比较挺大的设备</html></li><li><p>v-bind 用来操作html原生属性 <a href="https://blog.csdn.net/gao_xu_520/article/details/76172406" target="_blank" rel="noopener">https://blog.csdn.net/gao_xu_520/article/details/76172406</a></p></li><li><p>Vue props用法小结  <a href="https://blog.csdn.net/q3254421/article/details/84068341" target="_blank" rel="noopener">https://blog.csdn.net/q3254421/article/details/84068341</a> 父组件用来给子组件传值，可以用到props</p></li><li><p>export 和 default export的区别 <a href="https://www.jianshu.com/p/edaf43e9384f" target="_blank" rel="noopener">https://www.jianshu.com/p/edaf43e9384f</a></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">只对当前页面有效。</span></span><br></pre></td></tr></table></figure><hr><h2 id="2017-03-15"><a href="#2017-03-15" class="headerlink" title="2017-03-15"></a>2017-03-15</h2><p><router-view> </router-view> 填充的是路由的模板内容<br>$ref 获取组件内的元素，<br>$parent:获取当前组件对象的父组件<br>$children:获取子组件<br>$root: 获取new Vew的实例<br>$el:组件对象的DOM元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VueRouter -&gt; </span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(‘hashchange’,<span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">switch</span>(location.hash)  </span><br><span class="line">        case ‘#login’:</span><br><span class="line">            div.innerHTML=“&lt;h1&gt;登陆页面&lt;<span class="regexp">/h1&gt;" </span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><p>Vue.$nextTick 获取更新后的 DOM，在 DOM 更新循环结束之后执行延迟回调</p><hr><h2 id="2017-03-14"><a href="#2017-03-14" class="headerlink" title="2017-03-14"></a>2017-03-14</h2><p>Vue对象生命周期  </p><p><keep-alive>只能和<v-if> 配套使用。 </v-if></keep-alive></p><p><slot> Vue内置自定义组件。 父组件传递的DOM结构。</slot></p><p>computed：凡是函数内部有this.相关属性，改变都会触发当前函数，监视多个<br>watch: 监视单个 </p><hr><h2 id="Vue和原生，jQueryAPI替代"><a href="#Vue和原生，jQueryAPI替代" class="headerlink" title="Vue和原生，jQueryAPI替代"></a>Vue和原生，jQueryAPI替代</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$选择器可以用ref替代</span></span><br><span class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"menu_right"</span> ref=<span class="string">"menuFoodList"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> listContainer = <span class="keyword">this</span>.$refs.menuFoodList;</span><br><span class="line"></span><br><span class="line">$(elem).find(<span class="string">'.activity_menu'</span>) <span class="comment">//替代</span></span><br><span class="line"><span class="keyword">this</span>.$refs.wrapperMenu.querySelectorAll(<span class="string">'.activity_menu'</span>)</span><br><span class="line"></span><br><span class="line">$.each <span class="comment">//替代</span></span><br><span class="line">listContainer.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.shopListTop[index] = item.offsetTop;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">v-bind -&gt; setAttribute()   </span><br><span class="line">v-text -&gt; innerText    </span><br><span class="line">v-html -&gt; innerHTML    </span><br><span class="line">v-<span class="keyword">if</span> -&gt; </span><br><span class="line">    parent.removeChild(<span class="string">"elem"</span>) </span><br><span class="line">    parent.append(<span class="string">"ssss"</span>)</span><br><span class="line">v-show -&gt; </span><br><span class="line">    obj.style.display=<span class="string">'none/block'</span>  </span><br><span class="line">v-on: -&gt;</span><br><span class="line">    addEventListener (简写成)  @</span><br><span class="line">v-model -&gt; </span><br><span class="line">    双向数据流绑定，只能给具有value属性的元素进行双向数据绑定（必须使用的具有value属性的元素） </span><br><span class="line">v-model实现自定义的表单组件:</span><br><span class="line">    &lt;currency-input v-model=<span class="string">"price"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">currency-input</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>监听原生组件的事件,当获取到原生组件的值后把 值通过调用 $emit(‘input’ ,data) 方法去触发 input事件  </p><p>v-bind 可以给任何赋值属性，是从value到页面的单向数据流  简写成 :title<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in items”&gt;   </span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">$.each(items,funciton(i,obj)&#123;</span><br><span class="line">    $(elem).parent().append(&quot;&lt;li&gt;...&lt;/li&gt;&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>v-style :style -&gt; $.addClassRule</p><p>props用在定义自定义标签组件的属性上，v-bind用在定义原生标签属性上。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"myText"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"myHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"isExit"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>测试Num1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>测试Num2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span>v-show<span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>v-bind是 一个vue 指令，用于绑定 html 属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app”&gt; </span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;p v-bind:title="</span><span class="attr">t1</span> + ' ' + <span class="attr">t2</span>"&gt;</span></span><br><span class="line">        html属性不能使用双大括号形式绑定，只能使用v-bind指令</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    可简写成</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"t1+' '+t2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ...... </span><br><span class="line">var vm = new Vue(&#123; </span><br><span class="line">    el: '#app', </span><br><span class="line">    data: &#123; </span><br><span class="line">        t1: 'title1', </span><br><span class="line">        t2: 'title2'</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识点</title>
      <link href="/2017/03/24/interview/"/>
      <url>/2017/03/24/interview/</url>
      
        <content type="html"><![CDATA[<h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache狭义指的是CPU和RAM主存之间的Cache(利用比较昂贵的SRAM) 而且在内存和硬盘之间也有Cache（磁盘缓存）</span><br><span class="line">乃至在硬盘与网络之间也有某种意义上的Cache(如浏览器缓存) 当然也有代码级缓存(某些斐波那契算法) </span><br><span class="line">(内存包括ROM RAM Cache)</span><br></pre></td></tr></table></figure><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ASCII = 美国信息交换标准代码</span><br><span class="line"></span><br><span class="line">标准: 使用7位二进制数来表示所有的 大写/小写字母 数字0-9 标点符号  美式英语特殊控制字符</span><br><span class="line"></span><br><span class="line">0 - NUL空字符</span><br><span class="line">48 - 数字0</span><br><span class="line">65 - A</span><br><span class="line">97 - a</span><br><span class="line"></span><br><span class="line">其最高位(b7) == 奇偶校验位:</span><br><span class="line">所谓奇偶校验 是指在代码传送过程中用来检验是否出现错误的一种方法 一般分奇校验和偶校验两种。</span><br><span class="line">奇校验规定: 正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1</span><br><span class="line">偶校验规定: 正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1</span><br></pre></td></tr></table></figure><h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unicode=国际码=国际字符和二进制数字的对应关系</span><br><span class="line">Unicode 只是一个符号集 它只规定了符号的二进制代码 却没有规定这个二进制代码应该如何存储</span><br></pre></td></tr></table></figure><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UTF<span class="number">-8</span> 就是在互联网上使用最广的一种 Unicode 的实现方式。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UTF<span class="number">-8</span> 最大的一个特点，就是它是一种变长的编码方式。它可以使用<span class="number">1</span>~<span class="number">4</span>个字节表示一个符号，根据不同的符号而变化字节长度。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">UTF<span class="number">-8</span> 的编码规则很简单 只有二条:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>对于单字节的符号，字节的第一位设为<span class="number">0</span>，后面<span class="number">7</span>位为这个符号的 Unicode 码。因此对于英语字母，UTF<span class="number">-8</span> 编码和 ASCII 码是相同的。</span><br><span class="line"><span class="number">2.</span>对于n字节的符号（n &gt; <span class="number">1</span>），第一个字节的前n位都设为<span class="number">1</span>，第n + <span class="number">1</span>位设为<span class="number">0</span>，后面字节的前两位一律设为<span class="number">10</span>。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面，还是以汉字严为例，演示如何实现 UTF-8 编码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//严的 Unicode 是4E25（100111000100101）</span></span><br><span class="line"><span class="comment">//根据上表，可以发现4E25处在第三行的范围内（0000 0800 - 0000 FFFF）</span></span><br><span class="line"><span class="comment">//因此严的 UTF-8 编码需要三个字节，即格式是1110xxxx 10xxxxxx 10xxxxxx。</span></span><br><span class="line"><span class="comment">//然后，从严的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。</span></span><br><span class="line"><span class="comment">//这样就得到了，严的 UTF-8 编码是11100100 10111000 10100101，转换成十六进制就是E4B8A5。</span></span><br></pre></td></tr></table></figure><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL编码 == 百分号编码</span><br><span class="line"></span><br><span class="line">对以下类型字符进行编码:</span><br><span class="line">1.引起歧义的字符 (如 value 字符串中包含了 = 或者 &amp; 比附宝洁公司的简称为P&amp;G)</span><br><span class="line">2.非法字符 (URL 的编码格式采用的是 ASCII 码 而不是 Unicode 这也就是说你不能在 URL 中包含任何非 ASCII 字符 例如中文)</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p><code>使用同一个[TCP连接]来发送和接收多个[HTTP请求/应答]</code>   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP 1.0 =&gt; 如果浏览器支持 keep-alive =&gt; 请求头中添加 Connection: Keep-Alive =&gt; 服务器收到请求添加 Connection: Keep-Alive =&gt; 保持连接</span><br><span class="line"></span><br><span class="line">HTTP 1.1 所有的连接默认都是持续连接 除非特殊声明不支持</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP 2.0 不会线头阻塞 同时通过单一的 HTTP/2 连接发起多重的请求-响应消息</span><br><span class="line">HTTP 2.0 server push 技术 服务器可以对客户端的一个请求发送多个响应</span><br><span class="line">+首部压缩 </span><br><span class="line">+二进制分帧层</span><br></pre></td></tr></table></figure><h3 id="CGI-amp-WSGI"><a href="#CGI-amp-WSGI" class="headerlink" title="CGI &amp; WSGI"></a>CGI &amp; WSGI</h3><p><code>CGI: 通用网关接口 连接web服务器和应用程序的接口</code><br><code>WSGI: Python的CGI包装</code>      </p><h3 id="内网-IP-网段"><a href="#内网-IP-网段" class="headerlink" title="内网 IP 网段"></a>内网 IP 网段</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">但是在IPv4地址协议中预留了<span class="number">3</span>个IP地址段，作为私有地址，供组织机构内部使用。</span><br><span class="line">这三个地址段分别位于A、B、C三类地址内：</span><br><span class="line">A类地址：<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">-10.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">B类地址：<span class="number">172.16</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">-172.31</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">C类地址：<span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">-192.168</span><span class="number">.255</span><span class="number">.255</span></span><br></pre></td></tr></table></figure><h3 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1**(信息类)：表示接收到请求并且继续处理</span><br><span class="line"></span><br><span class="line">2**(响应成功)：表示动作被成功接收、理解和接受</span><br><span class="line"></span><br><span class="line">3**(重定向类)：为了完成指定的动作，必须接受进一步处理</span><br><span class="line">     301——本网页被永久性转移到另一个URL</span><br><span class="line">     302——请求的网页被转移到一个新的地址。</span><br><span class="line">    ...</span><br><span class="line">     304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用</span><br><span class="line"></span><br><span class="line">4**(客户端错误类)：请求包含错误语法或不能正确执行</span><br><span class="line"></span><br><span class="line">5**(服务端错误类)：服务器不能正确执行一个正确的请求</span><br></pre></td></tr></table></figure><h3 id="四种-POST-编码方式"><a href="#四种-POST-编码方式" class="headerlink" title="四种 POST 编码方式"></a>四种 POST 编码方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码</span><br><span class="line">再对主体进行解析。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">提交的数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.multipart/form-data</span><br><span class="line"></span><br><span class="line">生成了一个 boundary 用于分割不同的字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.application/json</span><br><span class="line"></span><br><span class="line">默认提交 JSON 字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.text/xml</span><br><span class="line"></span><br><span class="line">使用 XML 作为编码方式的远程调用规范</span><br></pre></td></tr></table></figure><h3 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DNS污染主要原理:</span><br><span class="line">用户在访问/请求一个网址时，会将域名提交给DNS来查询这个域名的IP,</span><br><span class="line">查询到域名的IP后才会去访问这个IP请求到想要的资源。</span><br><span class="line">GFW的五种封锁方法中,最简单粗暴的就是DNS污染,</span><br><span class="line">DNS污染的主要原理就是干扰查询域名的返回IP。</span><br><span class="line">而hosts文件优先级比DNS高,hosts文件里若有对应IP,会使计算机绕过DNS直接访问IP。</span><br></pre></td></tr></table></figure><p><code>补充:绕过DNS后如果遇到了IP封锁仍然会访问失败。</code>   </p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p><code>NAT=网络地址转换(Network Address Translation)</code><br><code>wifi=内网ip-&gt;公网ip-&gt;请求主机</code>    </p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器的5个常驻线程"><a href="#浏览器的5个常驻线程" class="headerlink" title="浏览器的5个常驻线程"></a>浏览器的5个常驻线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">浏览器的五个常驻线程：</span><br><span class="line"></span><br><span class="line">1.浏览器 GUI 渲染线程</span><br><span class="line"></span><br><span class="line">2.javascript 引擎线程</span><br><span class="line"></span><br><span class="line">3.浏览器定时器触发线程( setTimeout,setInterval )</span><br><span class="line"></span><br><span class="line">4.浏览器事件触发线程</span><br><span class="line"></span><br><span class="line">5.浏览器 http 异步请求</span><br><span class="line"></span><br><span class="line">当js引擎线程（第二个）进行时，会挂起其他一切线程，这个时候3、4、5这三类线程也会产生不同的异步事件，由于 javascript引擎线程为单线程，所以代码都是先压到队列，采用先进先出的方式运行，事件处理函数，timer函数也会压在队列中，不断的从队头取出事件，这就叫：javascript-event-loop。简单点说应该是当在进行第二线程的时候，1，3，4，5都会挂起，比如这时候触发click事件，即使先前JS已经加载完成，click事件会压在队列里，这里也要先完成第二线程才会执行click事件。</span><br></pre></td></tr></table></figure><h3 id="OPTIONS方法"><a href="#OPTIONS方法" class="headerlink" title="OPTIONS方法"></a>OPTIONS方法</h3><p><code>区别于GET, POST, DELETE, PUT</code>     </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求 比如 Content-Type application/json 的请求:</span><br><span class="line">浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。</span><br><span class="line">服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。</span><br><span class="line"></span><br><span class="line">ps: 某些请求不会触发 CORS 预检请求 我们称之为 简单请求</span><br><span class="line">ps: 对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是<span class="number">200</span>。</span><br></pre></td></tr></table></figure><p><code>如何减少OPTIONS预检频率?  答案:Access-Control-Max-Age: 86400</code>   </p><h3 id="输入URL按回车后都发生了什么"><a href="#输入URL按回车后都发生了什么" class="headerlink" title="输入URL按回车后都发生了什么"></a>输入URL按回车后都发生了什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-DNS解析 (查询 DNS 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存) -&gt; </span><br><span class="line"></span><br><span class="line">-TCP连接 (</span><br><span class="line"> <span class="comment">// 3次握手</span></span><br><span class="line"> <span class="comment">// 第一次握手 客户端发送 SYN=&gt; 服务端 (客户端: 我来了)</span></span><br><span class="line"> <span class="comment">// 第二次握手 服务端发送 ACK=&gt; 客户端 (服务端: 好嘞)</span></span><br><span class="line"> <span class="comment">// 第三次握手 客户端发送 ACK=&gt; 服务端 (客户端: 好嘞)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 4次挥手</span></span><br><span class="line"> <span class="comment">// 第一次挥手 主动关闭方 FIN=&gt; 被动关闭方 (客户端: 该撤了)</span></span><br><span class="line"> <span class="comment">// 第二次挥手 被动关闭方 ACK=&gt; 主动关闭发 (服务端: 好嘞)</span></span><br><span class="line"> <span class="comment">// 第三次挥手 被动关闭方 FIN=&gt; 主动关闭发 (服务端: 你撤那我也得撤啊 都确认了你最后再吱一声 不然我一直等着就智障了)</span></span><br><span class="line"> <span class="comment">// 第四次挥手 主动关闭方 ACK=&gt; 被动关闭方 (客户端: 好勒)</span></span><br><span class="line">) -&gt;</span><br><span class="line"></span><br><span class="line">-( SSL 四次握手 hello -&gt; certificate-hello -&gt; exchangekey -&gt; finished )</span><br><span class="line"></span><br><span class="line">-发送HTTP请求 (HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文) -&gt;</span><br><span class="line"></span><br><span class="line">-服务器处理请求返回HTTP报文 (查找资源返回状态码) -&gt;</span><br><span class="line"></span><br><span class="line">-浏览器解析渲染页面 (</span><br><span class="line"> <span class="comment">// T0 -&gt; [Get HTML] =&gt; [Browser Parsing HTML &amp; prefetch]</span></span><br><span class="line"> <span class="comment">// T1.0 -&gt; [Parsing Dom (Will Parse All The Tags Before Script Soon)] </span></span><br><span class="line"> <span class="comment">// T1.1 -&gt; (Maybe CSS Recieved / JS Recieved) =&gt; [(Dom Render Blocking) Load CSS &amp; Build CSSOM] =&gt; [Combine CSSOM + DOM -&gt; Render Tree] =&gt; [Paint]</span></span><br><span class="line"> <span class="comment">// T1.2 -&gt; [(Dom Parser Blocking) Load JS] =&gt; [Run JS] =&gt; [Parsing Dom] =&gt; (DomContentLoaded Event)</span></span><br><span class="line"> <span class="comment">// T1.3 -&gt; [Composite Layers] =&gt; (Load Event)</span></span><br><span class="line"> ) -&gt;</span><br><span class="line">连接结束</span><br></pre></td></tr></table></figure><h3 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T0</span></span><br><span class="line">浏览器预下载: 现代浏览器很聪明，会进行 prefetch 优化，浏览器在获得 HTML 文档之后会对页面上引用的资源进行提前下载。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T1.0</span></span><br><span class="line">DOM解析: 解析器把 HTML 转换为 JavaScript 可存取的 Dom 对象 (由浏览器 UI Render 线程负责)</span><br><span class="line"><span class="comment">// T1.1</span></span><br><span class="line">CSS加载: CSS加载会阻塞 DOM 渲染，不会阻塞 DOM 解析。CSS是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。</span><br><span class="line">Render树: CSSOM 树和 DOM 树合并成渲染树，然后用于计算每个可见元素的布局，并输出给绘制流程，将像素渲染到屏幕上。</span><br><span class="line"><span class="comment">// T1.2</span></span><br><span class="line">JavaScript加载: JavaScript可以查询和修改 DOM 与 CSSOM，所以 JavaScript 执行会阻止 DOM 和 CSSOM 构建 （除非将 JavaScript 显式声明为异步执行）。需要尽量将JavaScript放在 body 的末尾，保证首屏页面先渲染。V8 引擎执行 JavaScript 代码。</span><br><span class="line">DOMContentLoaded Event: 浏览器已经完全加载了HTML，DOM树已经构建完毕，但是像是 &lt;img&gt; 和样式表等外部资源可能并没有下载完毕。</span><br><span class="line"><span class="comment">// T1.3</span></span><br><span class="line">Load Event: 浏览器已经加载了所有的资源（图像，样式表等）。</span><br><span class="line"></span><br><span class="line"><span class="comment">// Paint 问题</span></span><br><span class="line"><span class="comment">// 经过 Chrome Performance 试验结果:</span></span><br><span class="line"><span class="comment">// 正常情况下 CSS Loaded + Parse StyleSheet (Build CSSOM) 随后会 Paint (即 T1.1 中的 Paint)</span></span><br><span class="line"><span class="comment">// 个别情况下 如 JS 资源下载不耗时 原先 T1.1 中的 Paint 可能会延后到 T1.2 DomContentLoaded Event 之后</span></span><br></pre></td></tr></table></figure><h3 id="Reflow-和-Repaint"><a href="#Reflow-和-Repaint" class="headerlink" title="Reflow 和 Repaint"></a>Reflow 和 Repaint</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">回流: reflow, 浏览器得知元素产生了对文档树排版有影响的样式变化，对所有受影响的dom节点进行重新排版工作</span><br><span class="line">重绘: repaint，就是浏览器得知元素产生了不影响排版的情况下后对这个元素进行重新绘制的过程。例如我们改变了元素的颜色，加个下划线等。</span><br><span class="line"></span><br><span class="line">优化思路: </span><br><span class="line">reflow一定触发repaint</span><br><span class="line">repaint不一定触发reflow</span><br><span class="line">因为reflow开销远大于repaint</span><br><span class="line">所以尽量少去触及dom节点重新排版的工作</span><br><span class="line">有时可以直接把改变的元素absolute踢出文档流 reflow+repaint即只涉及这一个节点</span><br></pre></td></tr></table></figure><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过 Meta 标签控制: </span><br><span class="line">例如 - <span class="xml"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span></span></span><br><span class="line"><span class="xml">只有部分浏览器支持 并为广泛使用</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">2.通过 HTTP 缓存控制:  </span></span><br><span class="line"><span class="xml">-2.1 强缓存:</span></span><br><span class="line"><span class="xml"> Expires 是服务器端在响应请求时用来规定资源的失效时间。  </span></span><br><span class="line"><span class="xml"> Cache-Control (HTTP 1.1 出现) 是服务器端在响应请求时用来规定资源是否需要被浏览器缓存以及缓存的有效时间等。  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> Cache-Control 的优先级要高于 Expires</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">-2.2 协商缓存:</span></span><br><span class="line"><span class="xml"> Etag ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。</span></span><br><span class="line"><span class="xml"> Last-Modify 该资源的最后修改时间</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> 服务器会优先验证ETag</span></span><br></pre></td></tr></table></figure><h3 id="各大浏览器厂商内核"><a href="#各大浏览器厂商内核" class="headerlink" title="各大浏览器厂商内核"></a>各大浏览器厂商内核</h3><p><code>IE4-9:   Trident</code><br><code>IE10+:   EdgeHTML</code><br><code>FireFox: Gecko</code><br><code>Opera:   Presto</code><br><code>Safari:  Webkit</code><br><code>Chrome:  Webkit</code>    </p><h3 id="Tap-与-Click"><a href="#Tap-与-Click" class="headerlink" title="Tap 与 Click"></a>Tap 与 Click</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">触屏网页的 tap 与 click :</span><br><span class="line">两者都会在点击时触发，但是在手机WEB端，click会有 <span class="number">200</span>~<span class="number">300</span> ms，所以请用tap代替click作为点击事件</span><br><span class="line"><span class="comment">//(触屏穿透问题最好通过300ms隐形浮层方法解决 或者 fastclick.js)</span></span><br><span class="line"></span><br><span class="line">tap 实现思路:</span><br><span class="line">基于三个基础触摸事件: touchstart、touchmove、touchend</span><br><span class="line"><span class="comment">// 滑动则不触发 tap + 长按超时则不触发 tap</span></span><br></pre></td></tr></table></figure><h3 id="LocalStorage-SessionStorage-两页面通信"><a href="#LocalStorage-SessionStorage-两页面通信" class="headerlink" title="LocalStorage SessionStorage 两页面通信"></a>LocalStorage SessionStorage 两页面通信</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalStorage 同源则 =&gt; 可以</span><br><span class="line">SessionStorage 同源也 =&gt; 不可以</span><br></pre></td></tr></table></figure><h3 id="同源定义"><a href="#同源定义" class="headerlink" title="同源定义"></a>同源定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[协议]+[端口]+[域名] 都相同</span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="ES6-ES7-ES8"><a href="#ES6-ES7-ES8" class="headerlink" title="ES6 ES7 ES8"></a>ES6 ES7 ES8</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">ES6常用新特性:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span><span class="keyword">let</span> &amp;&amp; <span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>iterable类型</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">let arr = ['a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">let iter = arr[Symbol.iterator]();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">iter.next() // &#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="comment">iter.next() // &#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="comment">iter.next() // &#123; value: 'c', done: false &#125;</span></span><br><span class="line"><span class="comment">iter.next() // &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">for</span> <span class="keyword">of</span> </span><br><span class="line"><span class="comment">// 用于遍历数组 与forEach()不同的是 它可以正确响应 break continue return 语句</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>解构赋值 </span><br><span class="line"><span class="comment">// let [a, b, c] = [1, 2, 3];</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>箭头函数 </span><br><span class="line"><span class="comment">// =&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>...操作符 </span><br><span class="line"><span class="comment">// Math.max(...[14, 3, 77]) 等同于 Math.max(14, 3, 77);</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>类</span><br><span class="line"><span class="comment">// ES6 的 class 可以看作只是一个语法糖</span></span><br><span class="line"><span class="comment">// 类的方法内部如果含有 this 它默认指向类的实例</span></span><br><span class="line"><span class="comment">// 如果一定要实现私有方法可以通过 Symbol 变通实现</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"><span class="keyword">const</span> snaf = <span class="built_in">Symbol</span>(<span class="string">'snaf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">myClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  foo(baz) &#123;</span><br><span class="line">    <span class="keyword">this</span>[bar](baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  [bar](baz) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[snaf] = baz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ES7新特性:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span><span class="built_in">Array</span>.prototype.includes</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Exponentiation Operator(求幂运算)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ES8新特性:</span><br><span class="line"><span class="number">1.</span><span class="built_in">Object</span>.values + <span class="built_in">Object</span>.entries </span><br><span class="line"><span class="comment">// let obj = &#123; a: 1, b: 2, c: 3 &#125;; </span></span><br><span class="line"><span class="comment">// Object.values(obj) [1,2,3]; </span></span><br><span class="line"><span class="comment">// Object.entries(obj) ['a', 1], ['b', 2], ['c', 3]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="built_in">String</span> padding </span><br><span class="line"><span class="comment">// 字符串填充</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="built_in">Object</span>.getOwnPropertyDescriptors </span><br><span class="line"><span class="comment">// writable 属性的值是否可以被重写 </span></span><br><span class="line"><span class="comment">// enumerable 此属性是否可以被枚举</span></span><br><span class="line"><span class="comment">// configurable 是否可以删除目标属性或是否可以再次修改属性的特</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>函数参数列表和调用中的尾逗号 </span><br><span class="line"><span class="comment">// Trailing commas</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>异步函数 </span><br><span class="line"><span class="comment">// Async Functions</span></span><br></pre></td></tr></table></figure><h3 id="throttle-amp-debounce"><a href="#throttle-amp-debounce" class="headerlink" title="throttle &amp; debounce"></a>throttle &amp; debounce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// throttle 节流</span></span><br><span class="line"><span class="comment">// 例如用户8s内连续点击300次按钮 可以throttle(fn, 5000)实现节流5s内只触发一次</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn, time</span>) </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> that = fn, </span><br><span class="line">        timer,  </span><br><span class="line">        firstTime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>,</span><br><span class="line">            me = <span class="keyword">this</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">            fn.apply(me, args)</span><br><span class="line">            <span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">          clearTimeout(timer)</span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">          fn.apply(me, args)</span><br><span class="line">        &#125;, time || <span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// debounce 防抖</span></span><br><span class="line"><span class="comment">// 例如搜索框只有在用户停止输入1s后才出现联想词 deboune(fn, 1000)</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">fn, delay</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        timer = setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6的模块化"><a href="#ES6的模块化" class="headerlink" title="ES6的模块化"></a>ES6的模块化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ES6的模块化的基本规则或特点</span><br><span class="line">1：每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；</span><br></pre></td></tr></table></figure><h3 id="ES6-import"><a href="#ES6-import" class="headerlink" title="ES6 import"></a>ES6 import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import 命令会被 JavaScript 引擎静态分析 先于模块内的其他语句执行</span><br><span class="line"></span><br><span class="line">如果 import 命令要取代 Node 的 require 方法 这就形成了一个障碍 </span><br><span class="line">因为 require 是运行时加载模块 import 命令无法取代 require 的动态加载功能</span><br></pre></td></tr></table></figure><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Symbol可以在set对象property的时候保证不会发生覆盖</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort"></a>Array.prototype.sort</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误用法</span></span><br><span class="line"><span class="comment">//会根据首个char字符assic码排序</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.sort.call([<span class="number">12</span>,<span class="number">1</span>,<span class="number">5</span>])</span><br><span class="line">&gt;&gt;&gt; (<span class="number">3</span>) [<span class="number">1</span>, <span class="number">12</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确用法</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.sort.call([<span class="number">12</span>,<span class="number">1</span>,<span class="number">5</span>],(a,b)=&gt;(a-b))</span><br><span class="line">&gt;&gt;&gt; (<span class="number">3</span>) [<span class="number">1</span>, <span class="number">5</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">使用<span class="built_in">Array</span>.prototype.sort不应该只返回两种值 <span class="literal">true</span> <span class="literal">false</span> 相当于 <span class="number">1</span> <span class="number">0</span> 而没有 <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-This"><a href="#JavaScript-This" class="headerlink" title="JavaScript This"></a>JavaScript This</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>纯粹的函数调用: <span class="keyword">this</span> === 全局对象 </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>作为对象方法的调用: 这时 <span class="keyword">this</span> 就指这个上级对象</span><br><span class="line">x = &#123;</span><br><span class="line">  a: <span class="number">1</span>, </span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) &#125;</span><br><span class="line">&#125;</span><br><span class="line">x.f() <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>作为构造函数调用: <span class="keyword">this</span> 指向这个新对象 </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">this</span>.a = n &#125;</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> o(<span class="number">1</span>) <span class="comment">// &#123;a: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>call/apply调用: 指向显式调用的对象</span><br><span class="line">x = &#123;</span><br><span class="line">  a: <span class="number">1</span>, </span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) &#125;</span><br><span class="line">&#125;</span><br><span class="line">x.f.call(&#123;<span class="attr">a</span>:<span class="number">2</span>&#125;) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>箭头函数: 箭头函数不会创建自己的 <span class="keyword">this</span> 它只会从自己的作用域链的上一层继承 <span class="keyword">this</span></span><br><span class="line">x = &#123;</span><br><span class="line">  a: <span class="number">1</span>, </span><br><span class="line">  f: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">x.f() <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="Event-Loop机制"><a href="#Event-Loop机制" class="headerlink" title="Event Loop机制"></a>Event Loop机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</span><br><span class="line">（<span class="number">2</span>）主线程之外，还存在一个<span class="string">"任务队列"</span>（task queue）。只要异步任务有了运行结果，就在<span class="string">"任务队列"</span>之中放置一个事件。</span><br><span class="line">（<span class="number">3</span>）一旦<span class="string">"执行栈"</span>中的所有同步任务执行完毕，系统就会读取<span class="string">"任务队列"</span>，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</span><br><span class="line">（<span class="number">4</span>）主线程不断重复上面的第三步。</span><br></pre></td></tr></table></figure><h3 id="macrostasks和microtasks"><a href="#macrostasks和microtasks" class="headerlink" title="macrostasks和microtasks"></a>macrostasks和microtasks</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">除了广义的同步任务和异步任务，我们对任务有更精细的定义：</span><br><span class="line"></span><br><span class="line">macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</span><br><span class="line">micro-task(微任务)：Promise，process.nextTick</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'ok'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt;&gt; 5 2 3 4 1</span></span><br><span class="line"><span class="comment">// 主线程的所有代码执行结束后。先从微任务queue里拿回掉函数，然后微任务queue空了后再从宏任务的queue拿函数。</span></span><br><span class="line"><span class="comment">// 事件循环总是 一个宏任务 =&gt; 所有微任务 =&gt; 一个宏任务 =&gt; 所有微任务 ...</span></span><br></pre></td></tr></table></figure><h3 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>);</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'ok'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">process.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 主执行栈先执行</span></span><br><span class="line"><span class="comment">// 6 主执行栈先执行</span></span><br><span class="line"><span class="comment">// 5 process.nextTick会在事件队列中强势插入</span></span><br><span class="line"><span class="comment">// 3 正常macrotasks执行后该microtasks执行</span></span><br><span class="line"><span class="comment">// 2 </span></span><br><span class="line"><span class="comment">// 1 同一时刻setImmediate压入事件队列的顺序会比setTimeout优先级低</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="原型-与-prototype"><a href="#原型-与-prototype" class="headerlink" title="原型 与 prototype"></a>原型 与 prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DOG.prototype.species = <span class="string">'犬科'</span>; <span class="comment">// 尽量不要用改变 prototype 引用的写法 例如: DOG.prototype = &#123; species: '犬科' &#125; ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> DOG(<span class="string">'二毛'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.species); <span class="comment">// 犬科</span></span><br><span class="line"><span class="built_in">console</span>.log(B.species); <span class="comment">// 犬科</span></span><br><span class="line"></span><br><span class="line">DOG.prototype.species = <span class="string">'猫科'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.species); <span class="comment">// 猫科</span></span><br><span class="line"><span class="built_in">console</span>.log(B.species); <span class="comment">// 猫科</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理: 实例会沿着原型链向上寻找species属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @ 引用关系图</span></span><br><span class="line"><span class="comment">                                      ----.constructor--&gt; </span></span><br><span class="line"><span class="comment"> A ---.__proto__---&gt;  DOG.prototype (                     ) DOG</span></span><br><span class="line"><span class="comment">                                      &lt;----.prototype---- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A.__proto__); </span><br><span class="line"><span class="comment">// &#123;species: "猫科", constructor: ƒ&#125; </span></span><br><span class="line"><span class="comment">// 其实就是 DOG.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(DOG.prototype, <span class="string">'is equal ?'</span>, A.__proto__ === DOG.prototype); </span><br><span class="line"><span class="comment">// &#123;species: "猫科", constructor: ƒ&#125; 'is equal ?' true</span></span><br><span class="line"><span class="comment">// 就是他</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(DOG.prototype === DOG.prototype.constructor.prototype); </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// 互相引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** @ DOG 和 Function 的关系  **/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(DOG.__proto__);</span><br><span class="line"><span class="comment">// ƒ () &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 其实就是 Function.prototype</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype, <span class="string">'is equal ?'</span>, DOG.__proto__ === <span class="built_in">Function</span>.prototype);</span><br><span class="line"><span class="comment">// ƒ () &#123; [native code] &#125; "is equal ?" true</span></span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype === <span class="built_in">Function</span>.prototype.constructor.prototype)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** @ 所以 对象字面量也同理 **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> C = &#123; <span class="attr">name</span>: <span class="string">"柴犬"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(C.__proto__ === <span class="built_in">Object</span>.prototype);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype === <span class="built_in">Object</span>.prototype.constructor.prototype);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="实现简易-Promise"><a href="#实现简易-Promise" class="headerlink" title="实现简易 Promise"></a>实现简易 Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 是包含 pending fufilled rejected 三种状态的状态机 开发者可以指定未来发生的事件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototypePromise</span> (<span class="params">excuteFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stack = [];</span><br><span class="line">    excuteFunction(<span class="keyword">this</span>.onResolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.onReject.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prototypePromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolve</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.push(onResolve);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototypePromise.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">handleError</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleError = handleError;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototypePromise.prototype.onResolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> closer = value;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.forEach.call(<span class="keyword">this</span>.stack, (next) =&gt; &#123;</span><br><span class="line">            closer = next(closer);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onReject(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototypePromise.prototype.onReject = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handleError(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript内存回收"><a href="#JavaScript内存回收" class="headerlink" title="JavaScript内存回收"></a>JavaScript内存回收</h3><p><code>1.标记清除: 变量离开执行环境就收回</code><br><code>2.引用计数: 简单粗暴 会受循环引用影响//(中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题)</code>    </p><h3 id="js的-按值传递-与-按引用传递"><a href="#js的-按值传递-与-按引用传递" class="headerlink" title="js的[按值传递]与[按引用传递]"></a>js的[按值传递]与[按引用传递]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">六种基本数据类型</span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line">string</span><br><span class="line">boolean</span><br><span class="line">number</span><br><span class="line">symbol(ES6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一种引用类型</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本质原理</span></span><br><span class="line">原始数据类型 =&gt; 存储在栈中</span><br><span class="line"><span class="comment">//占据空间固定</span></span><br><span class="line">引用类型 =&gt; 存储在堆中</span><br><span class="line"><span class="comment">//(而存储在变量处的值实际上是指针point,指向存储对象内存地址)</span></span><br><span class="line"><span class="comment">//占据空间大小会变</span></span><br></pre></td></tr></table></figure><h3 id="typeof-对照表"><a href="#typeof-对照表" class="headerlink" title="typeof 对照表"></a>typeof 对照表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>); <span class="comment">// object ☆</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="number">3</span>); <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="string">'str'</span>); <span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="built_in">Symbol</span>(<span class="string">'k'</span>)); <span class="comment">// symbol</span></span><br><span class="line"><span class="keyword">typeof</span>(&#123;<span class="attr">key</span>: <span class="number">0</span>&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// object  ☆</span></span><br></pre></td></tr></table></figure><h3 id="判断是否-Array"><a href="#判断是否-Array" class="headerlink" title="判断是否 Array"></a>判断是否 Array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true // es6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr.constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="判断是否空对象"><a href="#判断是否空对象" class="headerlink" title="判断是否空对象"></a>判断是否空对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接 for in + hasOwnProperty</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ieo</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ieo(obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj) === <span class="string">'&#123;&#125;'</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>; <span class="comment">// true // es6</span></span><br></pre></td></tr></table></figure><h3 id="如何正确遍历对象属性"><a href="#如何正确遍历对象属性" class="headerlink" title="如何正确遍历对象属性"></a>如何正确遍历对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.c = <span class="number">1</span>; <span class="comment">// 把属性c放在 Object 原型链上</span></span><br><span class="line"><span class="keyword">let</span> k = &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;; <span class="comment">// 通过字面量创建一个 Object 实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $ 错误方法: for in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> k) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// a, c // 会把原型链上的属性也打出来</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// $ 正确方法: 1.Object.keys</span></span><br><span class="line"><span class="built_in">Object</span>.keys(k); <span class="comment">// ['a']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $ 正确方法: 2.hasOwnProperty</span></span><br><span class="line">k.hasOwnProperty(<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line">k.hasOwnProperty(<span class="string">'c'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>箭头函数不会创建自己的<span class="keyword">this</span> 只会从自己的作用域链的上一层继承<span class="keyword">this</span> ☆</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过 call() 或 apply() 方法调用一个函数时 第一个参数会被忽略 (bind也同样成立)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>不绑定Arguments对象</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>不能和<span class="keyword">new</span>一起使用 和<span class="keyword">new</span>一起用会抛出错误</span><br><span class="line"><span class="comment">// 因为使用箭头函数后this会指定闭合的当前上下文，而当函数做为构造器的时候，this又会指向生成的实例， 这个造成歧义。</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>没有prototype</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>不能使用<span class="keyword">yield</span>关键字</span><br></pre></td></tr></table></figure><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XSS: 跨站脚本攻击</span><br><span class="line">恶意web用户将代码植入到提供给其它用户使用的页面中</span><br><span class="line"></span><br><span class="line">XSS防范:</span><br><span class="line">永远不要相信用户的输入 后端转义 + 前端转义</span><br></pre></td></tr></table></figure><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CSRF: 跨站请求伪造</span><br><span class="line">一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</span><br><span class="line"></span><br><span class="line">CSRF 防范</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>最基础的防范就是在 Get 与 Post 区别的文章中有说过</span><br><span class="line">Post 请求要比 Get 更为安全 但只能说会 Pass 一些低级攻击选手。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>请求来源限制——验证 HTTP Referer 字段</span><br><span class="line">在 HTTP 请求头中有一个字段叫 Referer 它记录了请求的来源地址 </span><br><span class="line">服务器需要做的是验证这个来源地址是否合法 如果是来自一些不受信任的网站 则拒绝响应</span><br><span class="line">(但是 Refer 也能伪造)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> CSRFToken </span><br><span class="line">使用随机数作为请求参数来校验</span><br></pre></td></tr></table></figure><h3 id="前端路由原理"><a href="#前端路由原理" class="headerlink" title="前端路由原理"></a>前端路由原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash模式: [hash 改变] + [监听 hashChange] + [route map 执行回调]</span><br><span class="line">history模式: [主动 pushState 改变 Path] + [route map 执行回调]</span><br></pre></td></tr></table></figure><h3 id="CSS3旋转"><a href="#CSS3旋转" class="headerlink" title="CSS3旋转"></a>CSS3旋转</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">ani-load</span> 0<span class="selector-class">.2s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span><br><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">ani-load</span> 0<span class="selector-class">.3s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span><br><span class="line">//</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> ani-load&#123;0%&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(0deg);<span class="attribute">transform</span>:<span class="built_in">rotate</span>(0deg)&#125;</span><br><span class="line">100%&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(360deg);<span class="attribute">transform</span>:<span class="built_in">rotate</span>(360deg)&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-transform"><a href="#CSS3-transform" class="headerlink" title="CSS3 transform"></a>CSS3 transform</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: rotate(-<span class="number">25deg</span>) translateX(<span class="number">30px</span>); <span class="comment">// 这种先rotate的写法 会把整个坐标系先旋转-25°再平移30px 也就是会向斜上方平移</span></span><br></pre></td></tr></table></figure><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>b<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- a和b的border-box等价-都能实现占据一行自适应宽度留空间--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 然而实现占据一半自适应宽度留空间 c的border-box是最佳方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap-c"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>c<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap-a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#CCC</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-b</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#777</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap-c</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#EEE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p><code>经典圣杯</code>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">     <span class="attribute">float</span>: left;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">left</span>: -<span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.center</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">margin-right</span>: -<span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Flex圣杯</code>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.left</span>, <span class="selector-class">.container</span> <span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一线天"><a href="#一线天" class="headerlink" title="一线天"></a>一线天</h3><p><code>中间固定-两端自适应(PC打开移动页面)</code>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Flex 一线天</code>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绝对居中"><a href="#绝对居中" class="headerlink" title="绝对居中"></a>绝对居中</h3><p><code>经典居中</code>   </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;    <span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;      <span class="comment">/* 外边距为自身宽高的一半 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transform居中</code>      </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;     <span class="comment">/* 相对定位或绝对定位均可 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex居中</code>   </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;        <span class="comment">/* 垂直居中 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;    <span class="comment">/* 水平居中 */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="flex-property"><a href="#flex-property" class="headerlink" title="flex property"></a>flex property</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: flex-grow flex-shrink flex-basis|auto|initial|inherit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flex-grow   一个数字，规定项目将相对于其他灵活的项目进行扩展的量。</span></span><br><span class="line"><span class="comment">flex-shrink 一个数字，规定项目将相对于其他灵活的项目进行收缩的量。</span></span><br><span class="line"><span class="comment">flex-basis  项目的长度。合法值："auto"、"inherit" 或一个后跟 "%"、"px"、"em" 或任何其他长度单位的数字。</span></span><br><span class="line"><span class="comment">auto    与 1 1 auto 相同。</span></span><br><span class="line"><span class="comment">none    与 0 0 auto 相同。</span></span><br><span class="line"><span class="comment">initial 设置该属性为它的默认值，即为 0 1 auto。请参阅 initial。</span></span><br><span class="line"><span class="comment">inherit 从父元素继承该属性。请参阅 inherit。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。   </span><br><span class="line">该协议的一个要点就是允许用户传递一个callback参数给服务端   </span><br><span class="line">然后服务端返回数据时会将这个callback参数作为函数名来包裹住<span class="built_in">JSON</span>数据    </span><br><span class="line">这样客户端就可以随意定制自己的函数来自动处理返回数据了。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">误解: jQuery Zepto之类的库把Ajax方法和jsonp方法封装在一起是容易产生误解的。   </span><br><span class="line">jsonp: jsonp实际上就不是ajax方法   </span><br><span class="line">jsonp利用&lt;script&gt;标签可以跨域的历史漏洞实现跨域请求参数   </span><br><span class="line">服务端将callback参数作为一个js函数的函数名而回调数据作为函数参数返回   </span><br><span class="line"></span><br><span class="line">callback(&#123; <span class="attr">msg</span>:<span class="string">'this is json data'</span>&#125;)<span class="comment">//jsonp方法的回调</span></span><br></pre></td></tr></table></figure><h3 id="多核处理上-node-如何榨干处理器资源"><a href="#多核处理上-node-如何榨干处理器资源" class="headerlink" title="多核处理上 node 如何榨干处理器资源?"></a>多核处理上 node 如何榨干处理器资源?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=&gt; 多进程</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了将多核 CPU 的性能发挥到极致</span></span><br><span class="line"><span class="comment">// 最大程度地榨干服务器资源</span></span><br><span class="line"><span class="comment">// egg 采用多进程模型</span></span><br><span class="line"><span class="comment">// 解决了一个 Node.js 进程只能运行在一个 CPU 上的问题</span></span><br></pre></td></tr></table></figure><h3 id="Express-原理"><a href="#Express-原理" class="headerlink" title="Express 原理"></a>Express 原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Express 有几个比较重要的概念: 中间件 路由 模版引擎</span><br></pre></td></tr></table></figure><h3 id="Express-中间件原理"><a href="#Express-中间件原理" class="headerlink" title="Express 中间件原理"></a>Express 中间件原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.use:</span><br><span class="line">加载用于处理 http 请求的 middleware 中间件 </span><br><span class="line"></span><br><span class="line">函数数组:</span><br><span class="line">express 内部维护一个函数数组 这个函数数组表示在发出响应之前要执行的所有函数</span><br><span class="line"></span><br><span class="line">结论:</span><br><span class="line">使用 app.use(fn) 后 传进来的fn就会被扔到这个数组里</span><br><span class="line">执行完毕后调用 next() 方法执行函数数组里的下一个函数</span><br><span class="line">如果没有调用 next() 的话 调用就会被终止</span><br></pre></td></tr></table></figure><h3 id="Express-路由原理"><a href="#Express-路由原理" class="headerlink" title="Express 路由原理"></a>Express 路由原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">router对象的主要作用:</span><br><span class="line">创建一个普通中间件 或者 路由中间件的引导着(这个引导着Layer对象链接到一个route对象)</span><br><span class="line">然后将其保存到自己的stack数组中</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有挂载路径的中间件，应用的每个请求都会执行该中间件</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Time:'</span>, <span class="built_in">Date</span>.now());</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载至 /user/:id 的中间件，任何指向 /user/:id 的请求都会执行它</span></span><br><span class="line">app.use(<span class="string">'/user/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Request Type:'</span>, req.method);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由和句柄函数(中间件系统)，处理指向 /user/:id 的 GET 请求</span></span><br><span class="line">app.get(<span class="string">'/user/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'USER'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Example app listening at http://%s:%s'</span>, host, port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Express-模板引擎原理"><a href="#Express-模板引擎原理" class="headerlink" title="Express 模板引擎原理"></a>Express 模板引擎原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ejs / jade 将数据和模板整合最终生成 html 文件</span><br></pre></td></tr></table></figure><h3 id="JavaScript-谷歌规范"><a href="#JavaScript-谷歌规范" class="headerlink" title="JavaScript 谷歌规范"></a>JavaScript 谷歌规范</h3><p> <code>[1]声明式和表达式规范</code>   </p><p> <code>结构:应符合[变量-业务逻辑-函数声明]的结构规范</code>   </p><p> <code>[函数声明式]与[函数表达式]在js解释器预编译阶段存在区别</code>   </p><p> <code>[函数声明式]函数声明和他的赋值都会被提前</code>   </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a();<span class="comment">// &gt;&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>[函数表达式]和变量一样[声明被提前]而[赋值并不被提前]</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e);<span class="comment">// &gt;&gt; undefined</span></span><br><span class="line"></span><br><span class="line">e();<span class="comment">//ERROR:e is not a function(…)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line"><span class="keyword">var</span> e =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>结构:应符合[变量-业务逻辑-函数声明]的结构规范</code>   </p><p> <code>[2]注释规范</code>   </p><p> <code>注释:用醒目多行注释对函数表达式的[参数类型]和[返回值类型]进行注释</code>   </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* 返回字符的字节长度（汉字算2个字节） </span></span><br><span class="line"><span class="comment">* @param &#123;string&#125; </span></span><br><span class="line"><span class="comment">* @returns &#123;number&#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getByteLen = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123; </span><br><span class="line">       <span class="keyword">var</span> len = <span class="number">0</span>; </span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123; </span><br><span class="line">           <span class="keyword">if</span> (val[i].match(<span class="regexp">/[^x00-xff]/ig</span>) != <span class="literal">null</span>) <span class="comment">//全角 </span></span><br><span class="line">               len += <span class="number">2</span>; </span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               len += <span class="number">1</span>; </span><br><span class="line">       &#125;; </span><br><span class="line">       <span class="keyword">return</span> len; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><h3 id="iOS中文键盘滚动"><a href="#iOS中文键盘滚动" class="headerlink" title="iOS中文键盘滚动"></a>iOS中文键盘滚动</h3><p><code>解决iOS中文键盘滚动的遮挡问题</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;ViewController.h&quot;</span><br><span class="line">#import &lt;WebKit/WebKit.h&gt;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@interface ViewController ()</span><br><span class="line">    @property(strong,nonatomic) WKWebView *webView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    _webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 60, 320, 508)];</span><br><span class="line">    _webView.navigationDelegate = self;</span><br><span class="line">    _webView.scrollView.bounces= NO;</span><br><span class="line">    NSURL *nsurl=[NSURL URLWithString:@&quot;https://XXXXXX...&quot;];</span><br><span class="line">    </span><br><span class="line">    NSURLRequest *nsrequest=[NSURLRequest requestWithURL:nsurl];</span><br><span class="line">    [_webView loadRequest:nsrequest];</span><br><span class="line">    [self.view addSubview:_webView];</span><br><span class="line"></span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(boardWillShow:) name:UIKeyboardWillShowNotification object:nil];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)boardWillShow:(NSNotification *)sender&#123;</span><br><span class="line">    //获得键盘的尺寸</span><br><span class="line">    CGRect keyBoardRect=[sender.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];</span><br><span class="line">    _webView.scrollView.contentOffset = CGPointMake(0, keyBoardRect.size.height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    // Dispose of any resources that can be recreated.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h3 id="iOS存储区"><a href="#iOS存储区" class="headerlink" title="iOS存储区"></a>iOS存储区</h3><p><code>iOS存储区</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Documents/  </span><br><span class="line">//使用这个目录来保存用户生成的文件。用户可以通过文件分享功能访问这个目录的内容。因此，这个目录你应该只放一些你希望展示给用户的文件。这个目录的文件会被 iTunes 和 iCloud 备份。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Library/  (后来发现在wkwebview下会有坑)</span><br><span class="line">//使用 Library 子文件夹来存放任何你不想被用户看到的文件。你的app不应该使用这些文件夹来存放用户数据文件。</span><br><span class="line">//除了 Caches 子文件夹，Library 文件夹下的内容会被 iTunes 和 iCloud 备份。</span><br><span class="line"></span><br><span class="line">tmp/</span><br><span class="line">//使用这个文件夹来存放在临时文件，系统也可能会在你的 app 不再运行的时候清除这个文件夹。</span><br><span class="line">//这个目录的文件 不会 被 iTunes 和 iCloud 备份。</span><br></pre></td></tr></table></figure></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="JavaScript-类似-列表生成式-版本的-快排"><a href="#JavaScript-类似-列表生成式-版本的-快排" class="headerlink" title="JavaScript 类似[列表生成式]版本的[快排]"></a>JavaScript 类似[列表生成式]版本的[快排]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qsort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">    <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> left = []</span><br><span class="line">    <span class="keyword">var</span> right = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;left.push(arr[i])&#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;right.push(arr[i])&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> qsort(left).concat([pivot], qsort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(qsort([<span class="number">32</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">87</span>]));<span class="comment">//弹出“2,16,32,37,45,87”</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-空间最优-版本的-快排"><a href="#JavaScript-空间最优-版本的-快排" class="headerlink" title="JavaScript [空间最优]版本的[快排]"></a>JavaScript [空间最优]版本的[快排]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.constructor.apply(<span class="keyword">this</span>,<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qsort</span> (<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> copyList = list.copy();</span><br><span class="line">    partial(copyList, <span class="number">0</span>, copyList.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> copyList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span> (<span class="params">list, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = left;</span><br><span class="line">    <span class="keyword">let</span> j = right;</span><br><span class="line">    <span class="keyword">let</span> pivot = list[left];</span><br><span class="line">    <span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((list[j] &gt;= pivot) &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ((list[i] &lt;= pivot) &amp;&amp; i &lt; j) &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = list[i];</span><br><span class="line">            list[i] = list[j];</span><br><span class="line">            list[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> meet = i;</span><br><span class="line">    <span class="keyword">let</span> tmp = list[meet];</span><br><span class="line">    list[meet] = pivot;</span><br><span class="line">    list[left] = tmp;</span><br><span class="line">    partial(list, left, meet - <span class="number">1</span>);</span><br><span class="line">    partial(list, meet + <span class="number">1</span>, right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(qsort([<span class="number">32</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">87</span>]))</span><br></pre></td></tr></table></figure><h3 id="JavaScript-归并排序"><a href="#JavaScript-归并排序" class="headerlink" title="JavaScript 归并排序"></a>JavaScript 归并排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> middle = <span class="built_in">parseInt</span>(arr.length/<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> left = arr.slice(<span class="number">0</span>,middle);</span><br><span class="line">  <span class="keyword">var</span> right = arr.slice(middle);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left),mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left,right</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; left.length &amp;&amp; j &lt; right.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left[i] &gt; right[j])&#123;</span><br><span class="line">      result.push(right[j++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      result.push(left[i++]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; left.length)&#123;</span><br><span class="line">    result.push(left[i++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(j &lt; right.length)&#123;</span><br><span class="line">    result.push(right[j++]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-二分查找"><a href="#JavaScript-二分查找" class="headerlink" title="JavaScript 二分查找"></a>JavaScript 二分查找</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bin</span> (<span class="params">list, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>] === target? <span class="number">0</span>: <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = list.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> center = list[mid];</span><br><span class="line">        <span class="keyword">if</span> (center === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (center &gt; target) &#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list[left] === target? left: <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bin([<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>], <span class="number">18</span>) <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-递归-版本斐波那契"><a href="#JavaScript-递归-版本斐波那契" class="headerlink" title="JavaScript [递归]版本斐波那契"></a>JavaScript [递归]版本斐波那契</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(x - <span class="number">2</span>) + fib(x - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-循环-有缓存-版本斐波那契"><a href="#JavaScript-循环-有缓存-版本斐波那契" class="headerlink" title="JavaScript [循环+有缓存]版本斐波那契"></a>JavaScript [循环+有缓存]版本斐波那契</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;</span><br><span class="line">        <span class="string">'1'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'2'</span>: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= x; i++) &#123;</span><br><span class="line">        cache[<span class="string">''</span> + i] = cache[<span class="string">''</span> + (i - <span class="number">1</span>)] + cache[<span class="string">''</span> + (i - <span class="number">2</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[<span class="string">''</span> + x]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-柯里化-版本斐波那契"><a href="#JavaScript-柯里化-版本斐波那契" class="headerlink" title="JavaScript [柯里化]版本斐波那契"></a>JavaScript [柯里化]版本斐波那契</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kvcf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;</span><br><span class="line">        <span class="string">'1'</span>: <span class="number">1</span>, </span><br><span class="line">        <span class="string">'2'</span>: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fib = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cache[<span class="string">''</span> + x] !== <span class="literal">undefined</span>) &#123; <span class="keyword">return</span> cache[<span class="string">''</span> + x] &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[<span class="string">''</span> + x] = fib(x - <span class="number">2</span>) + fib(x - <span class="number">1</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(kvcf()(<span class="number">40</span>)); <span class="comment">// 165580141</span></span><br></pre></td></tr></table></figure><h3 id="0-3-999-999-长度为-4-000-000-的数组中出现过多少个字符-‘1’-？"><a href="#0-3-999-999-长度为-4-000-000-的数组中出现过多少个字符-‘1’-？" class="headerlink" title="0 - 3,999,999 长度为 4,000,000 的数组中出现过多少个字符 ‘1’ ？"></a>0 - 3,999,999 长度为 4,000,000 的数组中出现过多少个字符 ‘1’ ？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">求解:</span><br><span class="line">  1000000 / 10 = 100000</span><br><span class="line">  100000 * 6   = 600000</span><br><span class="line">  600000 * 4   = 2400000</span><br><span class="line">  2400000 + 1000000 = 3400000</span><br><span class="line"></span><br><span class="line">答案:</span><br><span class="line">  3400000</span><br></pre></td></tr></table></figure><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h3 id="Redux-reducer-必须是纯函数"><a href="#Redux-reducer-必须是纯函数" class="headerlink" title="Redux reducer 必须是纯函数"></a>Redux reducer 必须是纯函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reducer 必须是纯函数 必须返回一个新state 不能直接修改老state </span><br><span class="line"></span><br><span class="line">本质原因: Redux 判断更新是直接浅层比较 按引用传递会被误认为没有更新</span><br></pre></td></tr></table></figure><h3 id="vue-对比-Angular、-React"><a href="#vue-对比-Angular、-React" class="headerlink" title="vue 对比 Angular、 React"></a>vue 对比 Angular、 React</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. vue的设计倾向于一个Library | 而Angular倾向于一个Framework</span><br><span class="line">2. Vue 3.0 放弃 Object.defineProperty 改用 ES6 Proxy (vue 1.0 - 2.0 的双向绑定定是基于ES5中的getter/setter) | 而Angular基于脏值检测 (从树根部深度遍历效率不高) | React使用setState手动通知数据模型变化</span><br><span class="line">3. Angular使用TypeScript来开发</span><br><span class="line">4. vue更拥抱基于CSS、JavaScript的经典的web开发 学习曲线更友好</span><br><span class="line">5. React会在组件改变时大颗粒度地以其为根组件渲染其所有子组件 | 而vue会跟踪组件关系细粒度地渲染子组件变化</span><br><span class="line">6. React使用JSX以及CSS-in-JS | 而vue即使在单组件内也保留了经典经典的HTML模板以及&lt;style&gt;标签编写CSS</span><br></pre></td></tr></table></figure><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate =&gt; created =&gt; beforeMount =&gt; mounted =&gt; beforeDestroy =&gt; destroyed</span><br><span class="line">                                           v  ^</span><br><span class="line">                               beforeUpdate -&gt; updated</span><br></pre></td></tr></table></figure><h3 id="vue生命周期-数据与Dom节点驱动关系"><a href="#vue生命周期-数据与Dom节点驱动关系" class="headerlink" title="vue生命周期 - 数据与Dom节点驱动关系"></a>vue生命周期 - 数据与Dom节点驱动关系</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  &lt;div id="app"&gt;</span></span><br><span class="line"><span class="comment">//    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">//  &lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------beforeCreate------ </span><br><span class="line">el     : <span class="literal">undefined</span></span><br><span class="line">data   : <span class="literal">undefined</span></span><br><span class="line">message: <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">        ------created------   <span class="comment">// 此时 data已初始化 dom节点还未创建</span></span><br><span class="line">        el     : <span class="literal">undefined</span></span><br><span class="line">        data   : &#123;<span class="string">"message"</span>:<span class="string">"你好 Vue"</span>&#125;</span><br><span class="line">        message: 你好 Vue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                ------beforeMount------   <span class="comment">// 此时 dom节点已创建已添加到页面 &#123;&#123;message&#125;&#125;插值运算还未计算</span></span><br><span class="line">                el     : <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                data   : &#123;<span class="string">"message"</span>:<span class="string">"你好 Vue"</span>&#125;</span><br><span class="line">                message: 你好 Vue</span><br><span class="line"></span><br><span class="line">                        ------mounted------  <span class="comment">// &#123;&#123;message&#125;&#125;插值运算结束</span></span><br><span class="line">                        el     : <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                        data   : &#123;<span class="string">"message"</span>:<span class="string">"你好 Vue"</span>&#125;</span><br><span class="line">                        message: 你好 Vue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &gt;&gt;&gt; vm.message = <span class="string">'你好世界'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                ------beforeUpdate------  <span class="comment">// data已经改变 virtualdom还未驱动dom更新</span></span><br><span class="line">                                el     : <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好 Vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                                data   : &#123;<span class="string">"message"</span>:<span class="string">"你好世界"</span>&#125;</span><br><span class="line">                                message: 你好世界</span><br><span class="line"></span><br><span class="line">                                        ------updated------  <span class="comment">// 已更新dom</span></span><br><span class="line">                                        el     : <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                                        data   : &#123;<span class="string">"message"</span>:<span class="string">"你好世界"</span>&#125;</span><br><span class="line">                                        message: 你好世界</span><br></pre></td></tr></table></figure><h3 id="vue-observer-dep-watcher-以及-nextTick"><a href="#vue-observer-dep-watcher-以及-nextTick" class="headerlink" title="vue observer/dep/watcher 以及 nextTick"></a>vue observer/dep/watcher 以及 nextTick</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Observer: 数据的观察者，让数据对象的读写操作都处于自己的监管之下</span><br><span class="line"></span><br><span class="line">Watcher: 数据的订阅者，数据的变化会通知到Watcher，然后由Watcher进行相应的操作，例如更新视图</span><br><span class="line"></span><br><span class="line">Dep: Observer与Watcher的纽带，当数据变化时，会被Observer观察到，然后由Dep通知到 Watcher 更新而执行 queuewatcher()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示意:</span></span><br><span class="line"></span><br><span class="line">$vm.data =&gt; Observer <span class="comment">// 一个 data 对应[一个] Observer</span></span><br><span class="line">                  v</span><br><span class="line">                  Observer.walk <span class="comment">// 通过 Observer.walk 多次 defineReactive()</span></span><br><span class="line">                  v</span><br><span class="line">                  <span class="keyword">for</span> (..) &#123;</span><br><span class="line">                      <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()..  <span class="comment">// 实例化[多个] Dep</span></span><br><span class="line">                      proxy(data) <span class="comment">// Vue 3.0 使用 Proxy 代理多个 key 的 set 和 get</span></span><br><span class="line">                      dep.depend().. addDep.. addSub.. <span class="comment">// 添加[多个]实例化的 watcher 到数组 dep.subs</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">----&gt; 拦截到 set ---&gt; Observer 调用 dep.notify()</span><br><span class="line">                                      v</span><br><span class="line">                                      遍历subs去更新</span><br><span class="line">                                      V</span><br><span class="line">                                      <span class="keyword">for</span> (...) &#123;</span><br><span class="line">                                          queueWatcher() -&gt; -&gt; -&gt; nextTick(flushSchedulerQueue)</span><br><span class="line">                                      &#125;</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line"><span class="comment">// nextTick 原理</span></span><br><span class="line"></span><br><span class="line">- queuewatcher 更新本身就用的 nextTick(flushSchedulerQueue)   </span><br><span class="line">- Vue.nextTick 依然使用 nextTick 即可保证回调进入事件队列队尾</span><br><span class="line">- nextTick 基于 microTimerFunc (promise) 或者 macroTimerFunc (setImmediate, MessageChannel, setTimeout) 来实现</span><br></pre></td></tr></table></figure><h3 id="Angular在什么时刻更新视图"><a href="#Angular在什么时刻更新视图" class="headerlink" title="Angular在什么时刻更新视图?"></a>Angular在什么时刻更新视图?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要在执行异步事件时</span></span><br><span class="line">用户输入操作，比如点击，提交等</span><br><span class="line">请求服务端数据</span><br><span class="line">定时事件，比如setTimeout，setInterval</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何监听全部异步事件的?</span></span><br><span class="line">Angular接入了ZoneJS 由它监听了Angular所有的异步事件</span><br><span class="line"><span class="comment">// ZoneJS是怎么做到的呢？</span></span><br><span class="line">其实它重写了所有的异步api（所谓的猴子补丁Monkey patch）！ZoneJS会通知Angular可能有数据发生变化，需要检测更新。</span><br></pre></td></tr></table></figure><h3 id="vue-key"><a href="#vue-key" class="headerlink" title="vue key"></a>vue key</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="function"><span class="params">for</span> =&gt;</span> 使用就地复用原则</span><br><span class="line"><span class="comment">// 数据顺序改变时不会移动 dom </span></span><br><span class="line"><span class="comment">// 而是就地改变元素 </span></span><br><span class="line"><span class="comment">// 这个策略不适合类似表单输入框的场景</span></span><br><span class="line"></span><br><span class="line">可以用 :key 来追踪元素</span><br><span class="line"><span class="comment">// 类似 vue 1.x 的 track-by</span></span><br></pre></td></tr></table></figure><h3 id="vue-异步组件原理"><a href="#vue-异步组件原理" class="headerlink" title="vue 异步组件原理"></a>vue 异步组件原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue 异步组件只在实际需要渲染组件时 才触发调用工厂函数</span><br></pre></td></tr></table></figure><h3 id="Cordova-RN-如何通信"><a href="#Cordova-RN-如何通信" class="headerlink" title="Cordova / RN 如何通信"></a>Cordova / RN 如何通信</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cordova</span></span><br><span class="line"><span class="comment">// 通过打开gap://协议请求被native端拦截</span></span><br><span class="line"></span><br><span class="line">... return prompt(argsJson, <span class="string">'gap:'</span>+<span class="built_in">JSON</span>.stringify([bridgeSecret, service, action, callbackId])); </span><br><span class="line"></span><br><span class="line">... window.webkit.messageHandlers.cordova.postMessage(command);</span><br><span class="line"></span><br><span class="line"><span class="comment">// native 把返回值和 callbackID 返回给 js</span></span><br><span class="line"><span class="comment">// 完成通信</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RN</span></span><br><span class="line"></span><br><span class="line">React Native会在一开始生成OC模块表</span><br><span class="line">然后把这个模块表传入JS中 </span><br><span class="line">JS参照模块表 就能通过JavaScriptCore执行而间接调用OC的代码(微信小程序方式类似)</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="weinre远端调试"><a href="#weinre远端调试" class="headerlink" title="weinre远端调试"></a>weinre远端调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">npm install -g weinre</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动</span><br><span class="line">weinre --httpPort 8080 --boundHost -all-</span><br></pre></td></tr></table></figure><h3 id="safari无痕模式"><a href="#safari无痕模式" class="headerlink" title="safari无痕模式"></a>safari无痕模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">safari无痕浏览模式</span><br><span class="line"><span class="built_in">window</span>.localStorage.setItem is <span class="literal">true</span> but call error</span><br></pre></td></tr></table></figure><h3 id="强类型-弱类型-静态类型-动态类型"><a href="#强类型-弱类型-静态类型-动态类型" class="headerlink" title="强类型 弱类型 静态类型 动态类型"></a>强类型 弱类型 静态类型 动态类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">强类型: 偏向于[不容忍][隐式类型转换]      </span><br><span class="line">弱类型: 偏向于[容忍][隐式类型转换]     </span><br><span class="line">静态类型: ==[静态类型检查] [编译时]拒绝非法行为     </span><br><span class="line">动态类型: ==[动态类型检查] [运行时]拒绝非法行为</span><br></pre></td></tr></table></figure><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>单体/单例模式: 一个类只能保证有一个实例 例如对象字面量的方式创建一个单例</span><br><span class="line"></span><br><span class="line"><span class="comment">//先判断实例是否存在，存在则返回，不存在则创建，这样可以保证一个类只有一个实例对象</span></span><br><span class="line"><span class="keyword">var</span> test_simple = test_simple || &#123;</span><br><span class="line">   name: <span class="string">'alice'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.1</span>.观察者模式</span><br><span class="line">观察者模式: 要求希望接收到主题通知的观察者必须订阅内容改变的事件</span><br><span class="line"></span><br><span class="line"><span class="number">2.2</span>.发布订阅模式</span><br><span class="line">发布订阅模式: 使用了一个主题/事件通道 这个通道介于订阅者和发布者之间 其目的是避免订阅者和发布者产生依赖</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>工厂模式</span><br><span class="line">工厂模式: 提供创建对象的接口 封装一些公用的方法 如果实现具体的业务逻辑 可以放在子类重写父类的方法</span><br><span class="line">优点: 弱化对象间的耦合 防止代码重复</span><br><span class="line">缺点: 简单业务可以用 复杂的业务会导致代码维护性差 不易阅读</span><br><span class="line"></span><br><span class="line">FruitCake.prototype.makeCake = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cake;</span><br><span class="line">    <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'apple'</span>:</span><br><span class="line">            cake = <span class="keyword">new</span> AppleCake();<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'pear'</span>:</span><br><span class="line">            cake = <span class="keyword">new</span> Pear();<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            cake = <span class="keyword">new</span> Orange();<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cake;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES-Include-Has-In"><a href="#ES-Include-Has-In" class="headerlink" title="ES Include Has In"></a>ES Include Has In</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> <span class="keyword">in</span> &#123;<span class="string">'2'</span>: <span class="number">2</span>&#125;; <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>].includes(<span class="number">2</span>);  <span class="comment">// true</span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>])).has(<span class="number">2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="hybrid-app项目-上线流程"><a href="#hybrid-app项目-上线流程" class="headerlink" title="(hybrid)app项目-上线流程"></a>(hybrid)app项目-上线流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发=&gt;开发打包=&gt;开发自测=&gt;测试环境打包=&gt;测试(测试同学直接去下载测试包)=&gt;正式发版本=&gt;更新到渠道</span><br></pre></td></tr></table></figure><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm管理node版本   </span><br><span class="line">nvm use -v 0.10.32</span><br></pre></td></tr></table></figure><h3 id="package-json版本固化"><a href="#package-json版本固化" class="headerlink" title="package.json版本固化"></a>package.json版本固化</h3><p><code>1.2.2 =&gt; 大版本号.次要版本号.小版本号</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">波浪号（tilde）+指定版本：安装时不改变大版本号和次要版本号。</span><br><span class="line">插入号（caret）+指定版本：安装时不改变大版本号。</span><br><span class="line">latest：安装最新版本。</span><br></pre></td></tr></table></figure></p><h3 id="console-log的lazy"><a href="#console-log的lazy" class="headerlink" title="console.log的lazy"></a>console.log的lazy</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制台打印的[折叠的][按引用传]的对象,把折叠打开后才拿到折叠起来的值。</span><br></pre></td></tr></table></figure><h3 id="hybrid-本地xhr"><a href="#hybrid-本地xhr" class="headerlink" title="hybrid-本地xhr"></a>hybrid-本地xhr</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以在服务端配跨域access-allow-origin为&apos;null&apos;</span><br></pre></td></tr></table></figure><h3 id="CORS-如何带-Cookie"><a href="#CORS-如何带-Cookie" class="headerlink" title="CORS 如何带 Cookie"></a>CORS 如何带 Cookie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.withCredentials</span><br><span class="line"> +</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure><h3 id="hybird-base64"><a href="#hybird-base64" class="headerlink" title="hybird-base64"></a>hybird-base64</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64图片为纯本地图片-不需要发网路请求</span><br></pre></td></tr></table></figure><h3 id="HTML5-废弃的标签"><a href="#HTML5-废弃的标签" class="headerlink" title="HTML5 废弃的标签"></a>HTML5 废弃的标签</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>可以使用css代替的标签</span><br><span class="line">删除 basefont,big,center,font,s,strike,tt,u 这些纯表现的元素 html5中提倡把画面展示性功能放在css中统一编辑</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>html5不再使用frame</span><br><span class="line">不再用 frame,noframes和frameset，这些标签对可用性产生负面影响。HTML5中不支持frame框架，只支持iframe框架，或者用服务器方创建的由多个页面组成的符合页面的形式，删除以上这三个标签。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>只有个别浏览器支持的标签</span><br><span class="line">bgsound 背景音乐，blink 文字闪烁，marquee 文字滚动, applet 用于插入JAVA渲染的代码</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>其他不常用的标签</span><br><span class="line">ul替代dir</span><br><span class="line">pre替代listing</span><br><span class="line">code替代xmp</span><br><span class="line">ruby替代rb</span><br><span class="line">abbr替代acronym</span><br><span class="line">废除isindex使用form与input相结合的方式替代。</span><br><span class="line">废除listing使用pre替代</span><br><span class="line">废除nextid使用guids</span><br><span class="line">废除plaintex使用“text/plian”（无格式正文）MIME类型替代。</span><br></pre></td></tr></table></figure><h3 id="CSS3-硬件加速"><a href="#CSS3-硬件加速" class="headerlink" title="CSS3 硬件加速"></a>CSS3 硬件加速</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transform =&gt; 不会触发 repaint</span><br><span class="line"><span class="comment">// 一点非常类似3D绘图功能</span></span><br><span class="line"><span class="comment">// 最终这些使用 transform 的图层都会由独立的合成器进程进行处理</span></span><br><span class="line"><span class="comment">// opacity filter 也支持硬件加速</span></span><br></pre></td></tr></table></figure><h3 id="CSS-实现-Retina-1px"><a href="#CSS-实现-Retina-1px" class="headerlink" title="CSS 实现 Retina 1px"></a>CSS 实现 Retina 1px</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1<span class="selector-class">.border-image</span> </span><br><span class="line"></span><br><span class="line">2<span class="selector-class">.linear-gradient</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:</span><br><span class="line">    <span class="built_in">linear-gradient</span>(180deg, black, black 50%, transparent 50%) top    left  / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(90deg,  black, black 50%, transparent 50%) top    right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(0,      black, black 50%, transparent 50%) bottom right / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">    <span class="built_in">linear-gradient</span>(-90deg, black, black 50%, transparent 50%) bottom left  / <span class="number">1px</span> <span class="number">100%</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3<span class="selector-class">.box-shadow</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hairlines</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> -<span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.淘宝使用 initial-scale 0.5/0.333 </span><br><span class="line"></span><br><span class="line">&lt;meta name="viewport" content="initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"&gt;</span><br><span class="line">&lt;meta name="viewport" content="initial-scale=0.3333333333333333, maximum-scale=0.33333, user-scalable=no"&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.伪元素 1<span class="selector-tag">px</span> <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>)</span><br></pre></td></tr></table></figure><h3 id="node-如何读取一个-2G-的文件"><a href="#node-如何读取一个-2G-的文件" class="headerlink" title="node 如何读取一个 2G 的文件"></a>node 如何读取一个 2G 的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一次读取一行 边读边处理边写</span><br></pre></td></tr></table></figure><h3 id="Git-冲突"><a href="#Git-冲突" class="headerlink" title="Git 冲突"></a>Git 冲突</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">msg:    db      "HELLO ASM", 10</span><br><span class="line">=======</span><br><span class="line">msg:    db      "Hello man", 10</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; origin/as</span></span><br><span class="line"></span><br><span class="line">git会对[不同行修改]自动merge`   </span><br><span class="line">git对[同行修改]会冲突`</span><br><span class="line">留下=======作为冲突代码块的区分`      </span><br><span class="line">解决冲突:  </span><br><span class="line">手动修改conflict的代码`-&gt;`git add`-&gt;`git commit`-&gt;`git push`</span><br></pre></td></tr></table></figure><h3 id="Git-切换到远程分支操作"><a href="#Git-切换到远程分支操作" class="headerlink" title="Git 切换到远程分支操作"></a>Git 切换到远程分支操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b apple origin/apple</span><br></pre></td></tr></table></figure><h3 id="Git-工作区-暂存区"><a href="#Git-工作区-暂存区" class="headerlink" title="Git 工作区 暂存区"></a>Git 工作区 暂存区</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">工作区 (Working Directory):</span><br><span class="line">就是你在电脑里能看到的目录</span><br><span class="line"></span><br><span class="line">暂存区 (stage):</span><br><span class="line">工作区有一个隐藏目录 .git 这个不算工作区 而是Git的版本库。 </span><br><span class="line">Git的版本库里存了很多东西 其中最重要的就是称为stage（或者叫index）的暂存区</span><br><span class="line"></span><br><span class="line">添加+提交 (add+commit)</span><br><span class="line">git add: 把文件添加进去 实际上就是把文件修改添加到暂存区</span><br><span class="line">git commit: 提交更改 实际上就是把暂存区的所有内容提交到当前分支。</span><br><span class="line">一旦提交后 如果你又没有对工作区做任何修改 那么工作区就是<span class="string">"干净"</span>的</span><br><span class="line"></span><br><span class="line">(HEAD就是当前活跃分支的游标)</span><br></pre></td></tr></table></figure><h3 id="Webpack-Cool-Plugin"><a href="#Webpack-Cool-Plugin" class="headerlink" title="Webpack Cool Plugin"></a>Webpack Cool Plugin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.Tree Shaking: 剔除无用 JS 死代码</span><br><span class="line">2.Webpack Bundle Analyzer: 打包分析</span><br></pre></td></tr></table></figure><h3 id="node调试"><a href="#node调试" class="headerlink" title="node调试"></a>node调试</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">移动端调试:直接localhost换成真实ip访问</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/01/24/hello-world/"/>
      <url>/2017/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
